commit 357b61485bba13116b24bd2644eb57684f929763
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Tue Jul 22 15:59:53 2025 +0800

    remove sensitive info

diff --git a/sky-server/src/main/resources/application-dev.yml b/sky-server/src/main/resources/application-dev.yml
index 07e9297..effad0b 100644
--- a/sky-server/src/main/resources/application-dev.yml
+++ b/sky-server/src/main/resources/application-dev.yml
@@ -9,7 +9,7 @@ sky:
 
   alioss:
     endpoint: oss-cn-hangzhou.aliyuncs.com
-    access-key-id: LTAI5tRTnQiCijrkJN7TDCRQ
-    access-key-secret: JblbLgfg2ORX1NjJHjnQ7zSKNqRoaV
+    access-key-id:
+    access-key-secret: 
     bucketName: java1535581710
 

commit 80b2f518800c8542367878a159864409cd117229
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Tue Jul 22 14:57:25 2025 +0800

    删除菜品功能开发

diff --git a/sky-server/src/main/java/com/sky/controller/admin/DishController.java b/sky-server/src/main/java/com/sky/controller/admin/DishController.java
index fb4df68..6b948ad 100644
--- a/sky-server/src/main/java/com/sky/controller/admin/DishController.java
+++ b/sky-server/src/main/java/com/sky/controller/admin/DishController.java
@@ -1,17 +1,21 @@
 package com.sky.controller.admin;
 
 import com.sky.dto.DishDTO;
+import com.sky.dto.DishPageQueryDTO;
 import com.sky.entity.Dish;
 import com.sky.mapper.DishMapper;
+import com.sky.result.PageResult;
 import com.sky.result.Result;
 import com.sky.service.DishService;
+import com.sky.vo.DishVO;
 import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
+import io.swagger.models.auth.In;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
 
 @RestController
 @RequestMapping("/admin/dish")
@@ -33,4 +37,31 @@ public class DishController {
 
     }
 
+    /**
+     * 菜品分页查询
+     * @param dishPageQueryDTO
+     * @return
+     */
+    @GetMapping("/page")
+    @ApiOperation("菜品分页查询")
+    public Result<PageResult> page(DishPageQueryDTO  dishPageQueryDTO) {
+        log.info("菜品分页查询:{}", dishPageQueryDTO);
+       PageResult pageResult=dishService.page(dishPageQueryDTO);
+        return Result.success(pageResult);
+    }
+
+
+    /**
+     * 批量删除菜品
+     * @param ids
+     * @return
+     */
+    @DeleteMapping
+    @ApiOperation("批量删除菜品")
+    public Result delete(@RequestParam List<Long> ids) {
+        log.info("批量删除菜品:{}", ids);
+        dishService.delete(ids);
+        return Result.success();
+    }
+
 }
diff --git a/sky-server/src/main/java/com/sky/mapper/DishFlavorMapper.java b/sky-server/src/main/java/com/sky/mapper/DishFlavorMapper.java
index 3685139..0a59926 100644
--- a/sky-server/src/main/java/com/sky/mapper/DishFlavorMapper.java
+++ b/sky-server/src/main/java/com/sky/mapper/DishFlavorMapper.java
@@ -3,6 +3,7 @@ package com.sky.mapper;
 import com.sky.annotation.AutoFill;
 import com.sky.entity.DishFlavor;
 import com.sky.enumeration.OperationType;
+import org.apache.ibatis.annotations.Delete;
 import org.apache.ibatis.annotations.Mapper;
 
 import java.util.List;
@@ -15,7 +16,16 @@ public interface DishFlavorMapper {
 
     /**
      * 批量添加口味
+     *
      * @param flavors
      */
     void insertBatch(List<DishFlavor> flavors);
+
+    /**
+     * 根据ID删除口味
+     *
+     * @param id
+     */
+    @Delete("delete from dish_flavor where dish_id=#{id}")
+    void deleteByDishId(Long id);
 }
diff --git a/sky-server/src/main/java/com/sky/mapper/DishMapper.java b/sky-server/src/main/java/com/sky/mapper/DishMapper.java
index 502b9de..d7024ab 100644
--- a/sky-server/src/main/java/com/sky/mapper/DishMapper.java
+++ b/sky-server/src/main/java/com/sky/mapper/DishMapper.java
@@ -1,8 +1,12 @@
 package com.sky.mapper;
 
+import com.github.pagehelper.Page;
 import com.sky.annotation.AutoFill;
+import com.sky.dto.DishPageQueryDTO;
 import com.sky.entity.Dish;
 import com.sky.enumeration.OperationType;
+import com.sky.vo.DishVO;
+import org.apache.ibatis.annotations.Delete;
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Select;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -24,4 +28,26 @@ public interface DishMapper {
      */
     @AutoFill(OperationType.INSERT)
     void insert(Dish dish);
+
+    /**
+     * 菜品分页查询
+     * @param dishPageQueryDTO
+     * @return
+     */
+    Page<DishVO> page(DishPageQueryDTO dishPageQueryDTO);
+
+    /**
+     * 根据ID查询菜品
+     * @param id
+     * @return
+     */
+    @Select("select * from dish where id=#{id}")
+    Dish getById(Long id);
+
+    /**
+     * 根据id删除菜品
+     * @param id
+     */
+    @Delete("delete from dish where id=#{id};")
+    void deleteById(Long id);
 }
diff --git a/sky-server/src/main/java/com/sky/mapper/SetmealDishMapper.java b/sky-server/src/main/java/com/sky/mapper/SetmealDishMapper.java
new file mode 100644
index 0000000..05c6435
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/mapper/SetmealDishMapper.java
@@ -0,0 +1,18 @@
+package com.sky.mapper;
+
+import com.sky.entity.SetmealDish;
+import org.apache.ibatis.annotations.Delete;
+import org.apache.ibatis.annotations.Mapper;
+import java.util.List;
+
+@Mapper
+public interface SetmealDishMapper {
+    /**
+     * 根据菜品id查询对应的套餐id
+     *
+     * @param ids
+     * @return
+     */
+    //select setmeal_id from setmeal_dish where dish_id in (1,2,3,4)
+    List<Long> getSetmealIdsByDishIds(List<Long> ids);
+}
\ No newline at end of file
diff --git a/sky-server/src/main/java/com/sky/mapper/SetmealMapper.java b/sky-server/src/main/java/com/sky/mapper/SetmealMapper.java
index 03cfee7..dea307c 100644
--- a/sky-server/src/main/java/com/sky/mapper/SetmealMapper.java
+++ b/sky-server/src/main/java/com/sky/mapper/SetmealMapper.java
@@ -3,6 +3,8 @@ package com.sky.mapper;
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Select;
 
+import java.util.List;
+
 @Mapper
 public interface SetmealMapper {
 
@@ -14,4 +16,5 @@ public interface SetmealMapper {
     @Select("select count(id) from setmeal where category_id = #{categoryId}")
     Integer countByCategoryId(Long id);
 
+
 }
diff --git a/sky-server/src/main/java/com/sky/service/DishService.java b/sky-server/src/main/java/com/sky/service/DishService.java
index 70d3a15..0201195 100644
--- a/sky-server/src/main/java/com/sky/service/DishService.java
+++ b/sky-server/src/main/java/com/sky/service/DishService.java
@@ -1,6 +1,11 @@
 package com.sky.service;
 
 import com.sky.dto.DishDTO;
+import com.sky.dto.DishPageQueryDTO;
+import com.sky.result.PageResult;
+import com.sky.vo.DishVO;
+
+import java.util.List;
 
 /**
  * 新增菜品对应口味
@@ -12,4 +17,19 @@ public interface DishService {
      * @param dishDTO
      */
     void save(DishDTO dishDTO);
+
+
+
+    /**
+     * 菜品分页查询
+     * @param dishPageQueryDTO
+     * @return
+     */
+    PageResult page(DishPageQueryDTO dishPageQueryDTO);
+
+    /**
+     * 批量删除菜品
+     * @param dishIds
+     */
+    void delete(List<Long> dishIds);
 }
diff --git a/sky-server/src/main/java/com/sky/service/impl/DishServiceImpl.java b/sky-server/src/main/java/com/sky/service/impl/DishServiceImpl.java
index 0cf1185..4d61284 100644
--- a/sky-server/src/main/java/com/sky/service/impl/DishServiceImpl.java
+++ b/sky-server/src/main/java/com/sky/service/impl/DishServiceImpl.java
@@ -1,11 +1,21 @@
 package com.sky.service.impl;
 
+import com.github.pagehelper.Page;
+import com.github.pagehelper.PageHelper;
+import com.sky.constant.MessageConstant;
+import com.sky.constant.StatusConstant;
 import com.sky.dto.DishDTO;
+import com.sky.dto.DishPageQueryDTO;
 import com.sky.entity.Dish;
 import com.sky.entity.DishFlavor;
+import com.sky.exception.DeletionNotAllowedException;
 import com.sky.mapper.DishFlavorMapper;
 import com.sky.mapper.DishMapper;
+import com.sky.mapper.SetmealDishMapper;
+import com.sky.mapper.SetmealMapper;
+import com.sky.result.PageResult;
 import com.sky.service.DishService;
+import com.sky.vo.DishVO;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.BeanUtils;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -18,24 +28,75 @@ import java.util.List;
 @Slf4j
 public class DishServiceImpl implements DishService {
 
+
     @Autowired
     private DishMapper dishMapper;
 
     @Autowired
     private DishFlavorMapper dishFlavorMapper;
 
+    @Autowired
+    private SetmealDishMapper setmealDishMapper;
+
+
+    /**
+     * 批量删除菜品
+     *
+     * @param ids
+     */
+    @Override
+    @Transactional
+    public void delete(List<Long> ids) {
+        //判断菜品里面是否有起售中的菜品
+        for (Long id : ids) {
+            Dish dish = dishMapper.getById(id);
+            if (dish.getStatus() == StatusConstant.ENABLE) {
+                throw new DeletionNotAllowedException(MessageConstant.DISH_ON_SALE);
+            }
+        }
+        //判断菜品里是否有套餐中的菜品
+        List<Long> list = setmealDishMapper.getSetmealIdsByDishIds(ids);
+        if (list != null && list.size() > 0) {
+            throw new DeletionNotAllowedException(MessageConstant.DISH_BE_RELATED_BY_SETMEAL);
+        }
+        //批量删除
+        for (Long id : ids) {
+            dishMapper.deleteById(id);
+            dishFlavorMapper.deleteByDishId(id);
+        }
+    }
+
+    /**
+     * 菜品分页查询
+     *
+     * @param dishPageQueryDTO
+     * @return
+     */
+    @Override
+    public PageResult page(DishPageQueryDTO dishPageQueryDTO) {
+        PageHelper.startPage(dishPageQueryDTO.getPage(), dishPageQueryDTO.getPageSize());
+        Page<DishVO> page = dishMapper.page(dishPageQueryDTO);
+        return new PageResult(page.getTotal(), page.getResult());
+    }
+
+
+    /**
+     * 新增菜品
+     *
+     * @param dishDTO
+     */
     @Override
     @Transactional
     public void save(DishDTO dishDTO) {
         Dish dish = new Dish();
-        BeanUtils.copyProperties(dishDTO,dish);
+        BeanUtils.copyProperties(dishDTO, dish);
         dishMapper.insert(dish);
 
-        Long dishId=dish.getId();
+        Long dishId = dish.getId();
 
-        List<DishFlavor> flavors=dishDTO.getFlavors();
-        if(flavors!=null&&flavors.size()>0){
-            flavors.forEach(flavor->{
+        List<DishFlavor> flavors = dishDTO.getFlavors();
+        if (flavors != null && flavors.size() > 0) {
+            flavors.forEach(flavor -> {
                 flavor.setDishId(dishId);
             });
         }
diff --git a/sky-server/src/main/resources/mapper/DishMapper.xml b/sky-server/src/main/resources/mapper/DishMapper.xml
index c6ec2c9..5a57748 100644
--- a/sky-server/src/main/resources/mapper/DishMapper.xml
+++ b/sky-server/src/main/resources/mapper/DishMapper.xml
@@ -7,4 +7,20 @@
         insert into dish (name, category_id, price, image, description, create_time, update_time, create_user,update_user, status)
         values (#{name}, #{categoryId}, #{price}, #{image}, #{description}, #{createTime}, #{updateTime}, #{createUser}, #{updateUser}, #{status})
     </insert>
+    <select id="page" resultType="com.sky.vo.DishVO">
+        select d.* ,c.name as categoryName from dish d left join category c
+        on d.category_id = c.id
+        <where>
+            <if test="name!=null">
+                and d.name like concat('%',#{name},'%')
+            </if>
+            <if test="categoryId!=null">
+                and d.category_id=#{categoryId}
+            </if>
+            <if test="status!=null">
+                and d.status=#{status}
+            </if>
+        </where>
+    </select>
 </mapper>
+
diff --git a/sky-server/src/main/resources/mapper/SetmealDishMapper.xml b/sky-server/src/main/resources/mapper/SetmealDishMapper.xml
new file mode 100644
index 0000000..293c333
--- /dev/null
+++ b/sky-server/src/main/resources/mapper/SetmealDishMapper.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
+<mapper namespace="com.sky.mapper.SetmealDishMapper">
+    <select id="getSetmealIdsByDishIds" resultType="java.lang.Long">
+        select setmeal_id from setmeal_dish where dish_id in
+        <foreach collection="ids" item="id" separator="," open="(" close=")">
+            #{id}
+        </foreach>
+    </select>
+</mapper>
\ No newline at end of file
diff --git a/sky-server/src/main/resources/mapper/SetmealMapper.xml b/sky-server/src/main/resources/mapper/SetmealMapper.xml
new file mode 100644
index 0000000..cb3163a
--- /dev/null
+++ b/sky-server/src/main/resources/mapper/SetmealMapper.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
+<mapper namespace="com.sky.mapper.SetmealMapper">
+
+
+        </mapper>
\ No newline at end of file

commit 6b07d6b2ab9e4db4b53573b50468a27a56d840a2
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Sun Jul 20 21:17:12 2025 +0800

    新增菜品功能开发

diff --git a/sky-server/src/main/java/com/sky/config/OssConfiguration.java b/sky-server/src/main/java/com/sky/config/OssConfiguration.java
new file mode 100644
index 0000000..ce02799
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/config/OssConfiguration.java
@@ -0,0 +1,22 @@
+package com.sky.config;
+
+import com.sky.properties.AliOssProperties;
+import com.sky.utils.AliOssUtil;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+@Slf4j
+public class OssConfiguration {
+    @Bean
+    @ConditionalOnMissingBean
+    public AliOssUtil aliOssUtil(AliOssProperties aliOssProperties){
+        log.info("开始创建阿里云文件上传工具类对象：{}",aliOssProperties);
+        return new AliOssUtil(aliOssProperties.getEndpoint(),
+                aliOssProperties.getAccessKeyId(),
+                aliOssProperties.getAccessKeySecret(),
+                aliOssProperties.getBucketName());
+    }
+}
diff --git a/sky-server/src/main/java/com/sky/controller/admin/CommonController.java b/sky-server/src/main/java/com/sky/controller/admin/CommonController.java
new file mode 100644
index 0000000..878dde2
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/controller/admin/CommonController.java
@@ -0,0 +1,56 @@
+package com.sky.controller.admin;
+
+import com.sky.constant.MessageConstant;
+import com.sky.result.Result;
+import com.sky.utils.AliOssUtil;
+import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.multipart.MultipartFile;
+import java.io.IOException;
+import java.util.UUID;
+
+/**
+ * 通用接口
+ */
+@RestController
+@RequestMapping("/admin/common")
+@Api(tags = "通用接口")
+@Slf4j
+public class CommonController {
+
+    @Autowired
+    private AliOssUtil aliOssUtil;
+
+    /**
+     * 文件上传
+     * @param file
+     * @return
+     */
+    @PostMapping("/upload")
+    @ApiOperation("文件上传")
+    public Result<String> upload(MultipartFile file){
+        log.info("文件上传：{}",file);
+
+        try {
+            //原始文件名
+            String originalFilename = file.getOriginalFilename();
+            //截取原始文件名的后缀   dfdfdf.png
+            String extension = originalFilename.substring(originalFilename.lastIndexOf("."));
+            //构造新文件名称
+            String objectName = UUID.randomUUID().toString() + extension;
+
+            //文件的请求路径
+            String filePath = aliOssUtil.upload(file.getBytes(), objectName);
+            return Result.success(filePath);
+        } catch (IOException e) {
+            log.error("文件上传失败：{}", e);
+        }
+
+        return Result.error(MessageConstant.UPLOAD_FAILED);
+    }
+}
\ No newline at end of file
diff --git a/sky-server/src/main/java/com/sky/controller/admin/DishController.java b/sky-server/src/main/java/com/sky/controller/admin/DishController.java
new file mode 100644
index 0000000..fb4df68
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/controller/admin/DishController.java
@@ -0,0 +1,36 @@
+package com.sky.controller.admin;
+
+import com.sky.dto.DishDTO;
+import com.sky.entity.Dish;
+import com.sky.mapper.DishMapper;
+import com.sky.result.Result;
+import com.sky.service.DishService;
+import io.swagger.annotations.Api;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/admin/dish")
+@Slf4j
+@Api(tags = "菜品相关接口")
+public class DishController {
+    @Autowired
+    private DishService dishService;
+
+
+    /**
+     * 新增菜品
+     */
+    @PostMapping
+    public Result save(@RequestBody DishDTO dishDTO) {
+        log.info("新增菜品:{}", dishDTO);
+        dishService.save(dishDTO);
+        return Result.success();
+
+    }
+
+}
diff --git a/sky-server/src/main/java/com/sky/mapper/DishFlavorMapper.java b/sky-server/src/main/java/com/sky/mapper/DishFlavorMapper.java
new file mode 100644
index 0000000..3685139
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/mapper/DishFlavorMapper.java
@@ -0,0 +1,21 @@
+package com.sky.mapper;
+
+import com.sky.annotation.AutoFill;
+import com.sky.entity.DishFlavor;
+import com.sky.enumeration.OperationType;
+import org.apache.ibatis.annotations.Mapper;
+
+import java.util.List;
+
+/**
+ * 菜品口味管理
+ */
+@Mapper
+public interface DishFlavorMapper {
+
+    /**
+     * 批量添加口味
+     * @param flavors
+     */
+    void insertBatch(List<DishFlavor> flavors);
+}
diff --git a/sky-server/src/main/java/com/sky/mapper/DishMapper.java b/sky-server/src/main/java/com/sky/mapper/DishMapper.java
index eece6f8..502b9de 100644
--- a/sky-server/src/main/java/com/sky/mapper/DishMapper.java
+++ b/sky-server/src/main/java/com/sky/mapper/DishMapper.java
@@ -1,7 +1,11 @@
 package com.sky.mapper;
 
+import com.sky.annotation.AutoFill;
+import com.sky.entity.Dish;
+import com.sky.enumeration.OperationType;
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Select;
+import org.springframework.beans.factory.annotation.Autowired;
 
 @Mapper
 public interface DishMapper {
@@ -14,4 +18,10 @@ public interface DishMapper {
     @Select("select count(id) from dish where category_id = #{categoryId}")
     Integer countByCategoryId(Long categoryId);
 
+    /**
+     * 插入新菜品
+     * @param dish
+     */
+    @AutoFill(OperationType.INSERT)
+    void insert(Dish dish);
 }
diff --git a/sky-server/src/main/java/com/sky/service/DishService.java b/sky-server/src/main/java/com/sky/service/DishService.java
new file mode 100644
index 0000000..70d3a15
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/service/DishService.java
@@ -0,0 +1,15 @@
+package com.sky.service;
+
+import com.sky.dto.DishDTO;
+
+/**
+ * 新增菜品对应口味
+ */
+public interface DishService {
+
+    /**
+     * 新增菜品
+     * @param dishDTO
+     */
+    void save(DishDTO dishDTO);
+}
diff --git a/sky-server/src/main/java/com/sky/service/impl/DishServiceImpl.java b/sky-server/src/main/java/com/sky/service/impl/DishServiceImpl.java
new file mode 100644
index 0000000..0cf1185
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/service/impl/DishServiceImpl.java
@@ -0,0 +1,44 @@
+package com.sky.service.impl;
+
+import com.sky.dto.DishDTO;
+import com.sky.entity.Dish;
+import com.sky.entity.DishFlavor;
+import com.sky.mapper.DishFlavorMapper;
+import com.sky.mapper.DishMapper;
+import com.sky.service.DishService;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.BeanUtils;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.List;
+
+@Service
+@Slf4j
+public class DishServiceImpl implements DishService {
+
+    @Autowired
+    private DishMapper dishMapper;
+
+    @Autowired
+    private DishFlavorMapper dishFlavorMapper;
+
+    @Override
+    @Transactional
+    public void save(DishDTO dishDTO) {
+        Dish dish = new Dish();
+        BeanUtils.copyProperties(dishDTO,dish);
+        dishMapper.insert(dish);
+
+        Long dishId=dish.getId();
+
+        List<DishFlavor> flavors=dishDTO.getFlavors();
+        if(flavors!=null&&flavors.size()>0){
+            flavors.forEach(flavor->{
+                flavor.setDishId(dishId);
+            });
+        }
+        dishFlavorMapper.insertBatch(flavors);
+    }
+}
diff --git a/sky-server/src/main/resources/application-dev.yml b/sky-server/src/main/resources/application-dev.yml
index 0342a70..07e9297 100644
--- a/sky-server/src/main/resources/application-dev.yml
+++ b/sky-server/src/main/resources/application-dev.yml
@@ -6,3 +6,10 @@ sky:
     database: sky_take_out
     username: root
     password: "123456"
+
+  alioss:
+    endpoint: oss-cn-hangzhou.aliyuncs.com
+    access-key-id: LTAI5tRTnQiCijrkJN7TDCRQ
+    access-key-secret: JblbLgfg2ORX1NjJHjnQ7zSKNqRoaV
+    bucketName: java1535581710
+
diff --git a/sky-server/src/main/resources/application.yml b/sky-server/src/main/resources/application.yml
index 24df577..5d907e4 100644
--- a/sky-server/src/main/resources/application.yml
+++ b/sky-server/src/main/resources/application.yml
@@ -4,6 +4,7 @@ server:
 spring:
   profiles:
     active: dev
+
   main:
     allow-circular-references: true
   datasource:
@@ -37,3 +38,8 @@ sky:
     admin-ttl: 7200000
     # 设置前端传递过来的令牌名称
     admin-token-name: token
+    alioss:
+      endpoint: ${sky.alioss.endpoint}
+      access-key-id: ${sky.alioss.access-key-id}
+      access-key-secret: ${sky.alioss.access-key-secret}
+      bucket-name: ${sky.alioss.bucket-name}
\ No newline at end of file
diff --git a/sky-server/src/main/resources/mapper/DishFlavorMapper.xml b/sky-server/src/main/resources/mapper/DishFlavorMapper.xml
new file mode 100644
index 0000000..e1332e6
--- /dev/null
+++ b/sky-server/src/main/resources/mapper/DishFlavorMapper.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
+<mapper namespace="com.sky.mapper.DishFlavorMapper">
+    <insert id="insertBatch">
+        insert into dish_flavor (dish_id, name, value) VALUES
+        <foreach collection="flavors" item="df" separator=",">
+            (#{df.dishId},#{df.name},#{df.value})
+        </foreach>
+    </insert>
+</mapper>
\ No newline at end of file
diff --git a/sky-server/src/main/resources/mapper/DishMapper.xml b/sky-server/src/main/resources/mapper/DishMapper.xml
new file mode 100644
index 0000000..c6ec2c9
--- /dev/null
+++ b/sky-server/src/main/resources/mapper/DishMapper.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
+<mapper namespace="com.sky.mapper.DishMapper">
+
+    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
+        insert into dish (name, category_id, price, image, description, create_time, update_time, create_user,update_user, status)
+        values (#{name}, #{categoryId}, #{price}, #{image}, #{description}, #{createTime}, #{updateTime}, #{createUser}, #{updateUser}, #{status})
+    </insert>
+</mapper>

commit c4e1d8edbd53b7d9313882d0fad1034baa1e87dc
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Sun Jul 20 14:40:18 2025 +0800

    公共字段自动填充（AOP）功能开发

diff --git a/sky-server/src/main/java/com/sky/annotation/AutoFill.java b/sky-server/src/main/java/com/sky/annotation/AutoFill.java
new file mode 100644
index 0000000..02903f3
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/annotation/AutoFill.java
@@ -0,0 +1,18 @@
+package com.sky.annotation;
+
+
+import com.sky.enumeration.OperationType;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * 自定义注解
+ */
+@Target(ElementType.METHOD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface AutoFill {
+    OperationType value();
+}
diff --git a/sky-server/src/main/java/com/sky/aspect/AutoFillAspect.java b/sky-server/src/main/java/com/sky/aspect/AutoFillAspect.java
new file mode 100644
index 0000000..2805797
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/aspect/AutoFillAspect.java
@@ -0,0 +1,85 @@
+package com.sky.aspect;
+
+import com.sky.annotation.AutoFill;
+import com.sky.constant.AutoFillConstant;
+import com.sky.context.BaseContext;
+import com.sky.enumeration.OperationType;
+import lombok.Data;
+import lombok.extern.slf4j.Slf4j;
+import org.aspectj.lang.JoinPoint;
+import org.aspectj.lang.Signature;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Before;
+import org.aspectj.lang.annotation.Pointcut;
+import org.aspectj.lang.reflect.MethodSignature;
+import org.springframework.stereotype.Component;
+
+import java.lang.reflect.Method;
+import java.time.LocalDateTime;
+
+
+/**
+ * AOP实现类
+ */
+@Aspect
+@Component
+@Slf4j
+public class AutoFillAspect {
+    /**
+     * 定义一个类实现切入点的传导
+     */
+    @Pointcut("execution(* com.sky.mapper.*.*(..))&&@annotation(com.sky.annotation.AutoFill)")
+    public void pointcut() {}
+
+    /**
+     * 定义通知，使用前置通知，实行公共字段的提前赋值
+     */
+    @Before("pointcut()")
+    public void autoFill(JoinPoint joinPoint){
+        /////////////////////重要////////////////////////////////////
+        //可先进行调试，是否能进入该方法 提前在mapper方法添加AutoFill注解
+        log.info("开始进行公共字段自动填充...");
+
+        //获取当前方法的数据库操作类型
+        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
+        AutoFill annotation = signature.getMethod().getAnnotation(AutoFill.class);
+        OperationType operationType = annotation.value();
+        //获取传入的实体对象
+        Object[] args = joinPoint.getArgs();
+        if(args == null || args.length == 0){
+            return;
+        }
+        Object entity = args[0];
+        //准备好要更新的字段数据，当前时间、操作者ID
+        LocalDateTime now = LocalDateTime.now();
+        Long currentID = BaseContext.getCurrentId();
+        //根据不同的操作更新不同的字段
+        if(operationType == OperationType.INSERT){
+            try {
+                Method setCreatTime = entity.getClass().getMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class);
+                Method setCreatUser = entity.getClass().getMethod(AutoFillConstant.SET_CREATE_USER, Long.class);
+                Method setUpdateTime = entity.getClass().getMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);
+                Method setUpdateUser = entity.getClass().getMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);
+
+                setCreatTime.invoke(entity,now);
+                setCreatUser.invoke(entity,currentID);
+                setUpdateTime.invoke(entity,now);
+                setUpdateUser.invoke(entity,currentID);
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+        }else if(operationType == OperationType.UPDATE){
+            try {
+                Method setUpdateTime = entity.getClass().getMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);
+                Method setUpdateUser = entity.getClass().getMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);
+
+                setUpdateTime.invoke(entity,now);
+                setUpdateUser.invoke(entity,currentID);
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+
+        }
+
+    }
+}
diff --git a/sky-server/src/main/java/com/sky/mapper/CategoryMapper.java b/sky-server/src/main/java/com/sky/mapper/CategoryMapper.java
index 56a34fd..397447c 100644
--- a/sky-server/src/main/java/com/sky/mapper/CategoryMapper.java
+++ b/sky-server/src/main/java/com/sky/mapper/CategoryMapper.java
@@ -1,6 +1,7 @@
 package com.sky.mapper;
 
 import com.github.pagehelper.Page;
+import com.sky.annotation.AutoFill;
 import com.sky.enumeration.OperationType;
 import com.sky.dto.CategoryPageQueryDTO;
 import com.sky.entity.Category;
@@ -16,6 +17,7 @@ public interface CategoryMapper {
      * 插入数据
      * @param category
      */
+    @AutoFill(OperationType.INSERT)
     @Insert("insert into category(type, name, sort, status, create_time, update_time, create_user, update_user)" +
             " VALUES" +
             " (#{type}, #{name}, #{sort}, #{status}, #{createTime}, #{updateTime}, #{createUser}, #{updateUser})")
@@ -39,6 +41,7 @@ public interface CategoryMapper {
      * 根据id修改分类
      * @param category
      */
+    @AutoFill(OperationType.UPDATE)
     void update(Category category);
 
     /**
diff --git a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
index a620277..186b141 100644
--- a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
+++ b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
@@ -1,8 +1,10 @@
 package com.sky.mapper;
 
 import com.github.pagehelper.Page;
+import com.sky.annotation.AutoFill;
 import com.sky.dto.EmployeePageQueryDTO;
 import com.sky.entity.Employee;
+import com.sky.enumeration.OperationType;
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Select;
@@ -22,6 +24,7 @@ public interface EmployeeMapper {
      * 插入员工数据
      * @param employee
      */
+    @AutoFill(OperationType.INSERT)
     @Insert("insert into employee (name, username, password, phone, sex, id_number, create_time, update_time, create_user, update_user,status) " +
             "values " +
             "(#{name},#{username},#{password},#{phone},#{sex},#{idNumber},#{createTime},#{updateTime},#{createUser},#{updateUser},#{status})")
@@ -38,6 +41,8 @@ public interface EmployeeMapper {
      * 根据主键动态修改属性
      * @param employee
      */
+
+    @AutoFill(OperationType.UPDATE)
     void update(Employee employee);
 
     /**
@@ -45,6 +50,7 @@ public interface EmployeeMapper {
      * @param id
      * @return
      */
+
     @Select("select * from employee where id =#{id}")
     Employee getById(Long id);
 }
diff --git a/sky-server/src/main/java/com/sky/service/impl/CategoryServiceImpl.java b/sky-server/src/main/java/com/sky/service/impl/CategoryServiceImpl.java
index 1c98f80..82b76b0 100644
--- a/sky-server/src/main/java/com/sky/service/impl/CategoryServiceImpl.java
+++ b/sky-server/src/main/java/com/sky/service/impl/CategoryServiceImpl.java
@@ -46,12 +46,12 @@ public class CategoryServiceImpl implements CategoryService {
 
         //分类状态默认为禁用状态0
         category.setStatus(StatusConstant.DISABLE);
-
-        //设置创建时间、修改时间、创建人、修改人
-        category.setCreateTime(LocalDateTime.now());
-        category.setUpdateTime(LocalDateTime.now());
-        category.setCreateUser(BaseContext.getCurrentId());
-        category.setUpdateUser(BaseContext.getCurrentId());
+//
+//        //设置创建时间、修改时间、创建人、修改人
+//        category.setCreateTime(LocalDateTime.now());
+//        category.setUpdateTime(LocalDateTime.now());
+//        category.setCreateUser(BaseContext.getCurrentId());
+//        category.setUpdateUser(BaseContext.getCurrentId());
 
         categoryMapper.insert(category);
     }
@@ -100,8 +100,8 @@ public class CategoryServiceImpl implements CategoryService {
         BeanUtils.copyProperties(categoryDTO,category);
 
         //设置修改时间、修改人
-        category.setUpdateTime(LocalDateTime.now());
-        category.setUpdateUser(BaseContext.getCurrentId());
+//        category.setUpdateTime(LocalDateTime.now());
+//        category.setUpdateUser(BaseContext.getCurrentId());
 
         categoryMapper.update(category);
     }
@@ -115,8 +115,8 @@ public class CategoryServiceImpl implements CategoryService {
         Category category = Category.builder()
                 .id(id)
                 .status(status)
-                .updateTime(LocalDateTime.now())
-                .updateUser(BaseContext.getCurrentId())
+//                .updateTime(LocalDateTime.now())
+//                .updateUser(BaseContext.getCurrentId())
                 .build();
         categoryMapper.update(category);
     }
diff --git a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
index c043ce6..fcf3f81 100644
--- a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
+++ b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
@@ -40,8 +40,8 @@ public class EmployeeServiceImpl implements EmployeeService {
         Employee employee = new Employee();
         BeanUtils.copyProperties(employeeDTO, employee);
 
-        employee.setUpdateTime(LocalDateTime.now());
-        employee.setUpdateUser(BaseContext.getCurrentId());
+//        employee.setUpdateTime(LocalDateTime.now());
+//        employee.setUpdateUser(BaseContext.getCurrentId());
 
         employeeMapper.update(employee);
     }
@@ -65,7 +65,7 @@ public class EmployeeServiceImpl implements EmployeeService {
     @Override
     public void startOrStop(Integer status, Long id) {
         Employee  employee=Employee.builder()
-                .id(id)
+//                .id(id)
                 .status(status)
                 .build();
         employeeMapper.update(employee);

commit 21464003a06b04f14c516d96273ddf0ed635e515
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Thu Jul 17 22:31:58 2025 +0800

    分类功能开发

diff --git a/sky-server/src/main/java/com/sky/controller/admin/CategoryController.java b/sky-server/src/main/java/com/sky/controller/admin/CategoryController.java
new file mode 100644
index 0000000..3ed6cc9
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/controller/admin/CategoryController.java
@@ -0,0 +1,103 @@
+package com.sky.controller.admin;
+
+import com.sky.dto.CategoryDTO;
+import com.sky.dto.CategoryPageQueryDTO;
+import com.sky.entity.Category;
+import com.sky.result.PageResult;
+import com.sky.result.Result;
+import com.sky.service.CategoryService;
+import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+import java.util.List;
+
+/**
+ * 分类管理
+ */
+@RestController
+@RequestMapping("/admin/category")
+@Api(tags = "分类相关接口")
+@Slf4j
+public class CategoryController {
+
+    @Autowired
+    private CategoryService categoryService;
+
+    /**
+     * 新增分类
+     * @param categoryDTO
+     * @return
+     */
+    @PostMapping
+    @ApiOperation("新增分类")
+    public Result<String> save(@RequestBody CategoryDTO categoryDTO){
+        log.info("新增分类：{}", categoryDTO);
+        categoryService.save(categoryDTO);
+        return Result.success();
+    }
+
+    /**
+     * 分类分页查询
+     * @param categoryPageQueryDTO
+     * @return
+     */
+    @GetMapping("/page")
+    @ApiOperation("分类分页查询")
+    public Result<PageResult> page(CategoryPageQueryDTO categoryPageQueryDTO){
+        log.info("分页查询：{}", categoryPageQueryDTO);
+        PageResult pageResult = categoryService.pageQuery(categoryPageQueryDTO);
+        return Result.success(pageResult);
+    }
+
+    /**
+     * 删除分类
+     * @param id
+     * @return
+     */
+    @DeleteMapping
+    @ApiOperation("删除分类")
+    public Result<String> deleteById(Long id){
+        log.info("删除分类：{}", id);
+        categoryService.deleteById(id);
+        return Result.success();
+    }
+
+    /**
+     * 修改分类
+     * @param categoryDTO
+     * @return
+     */
+    @PutMapping
+    @ApiOperation("修改分类")
+    public Result<String> update(@RequestBody CategoryDTO categoryDTO){
+        categoryService.update(categoryDTO);
+        return Result.success();
+    }
+
+    /**
+     * 启用、禁用分类
+     * @param status
+     * @param id
+     * @return
+     */
+    @PostMapping("/status/{status}")
+    @ApiOperation("启用禁用分类")
+    public Result<String> startOrStop(@PathVariable("status") Integer status, Long id){
+        categoryService.startOrStop(status,id);
+        return Result.success();
+    }
+
+    /**
+     * 根据类型查询分类
+     * @param type
+     * @return
+     */
+    @GetMapping("/list")
+    @ApiOperation("根据类型查询分类")
+    public Result<List<Category>> list(Integer type){
+        List<Category> list = categoryService.list(type);
+        return Result.success(list);
+    }
+}
diff --git a/sky-server/src/main/java/com/sky/mapper/CategoryMapper.java b/sky-server/src/main/java/com/sky/mapper/CategoryMapper.java
new file mode 100644
index 0000000..56a34fd
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/mapper/CategoryMapper.java
@@ -0,0 +1,50 @@
+package com.sky.mapper;
+
+import com.github.pagehelper.Page;
+import com.sky.enumeration.OperationType;
+import com.sky.dto.CategoryPageQueryDTO;
+import com.sky.entity.Category;
+import org.apache.ibatis.annotations.Delete;
+import org.apache.ibatis.annotations.Insert;
+import org.apache.ibatis.annotations.Mapper;
+import java.util.List;
+
+@Mapper
+public interface CategoryMapper {
+
+    /**
+     * 插入数据
+     * @param category
+     */
+    @Insert("insert into category(type, name, sort, status, create_time, update_time, create_user, update_user)" +
+            " VALUES" +
+            " (#{type}, #{name}, #{sort}, #{status}, #{createTime}, #{updateTime}, #{createUser}, #{updateUser})")
+    void insert(Category category);
+
+    /**
+     * 分页查询
+     * @param categoryPageQueryDTO
+     * @return
+     */
+    Page<Category> pageQuery(CategoryPageQueryDTO categoryPageQueryDTO);
+
+    /**
+     * 根据id删除分类
+     * @param id
+     */
+    @Delete("delete from category where id = #{id}")
+    void deleteById(Long id);
+
+    /**
+     * 根据id修改分类
+     * @param category
+     */
+    void update(Category category);
+
+    /**
+     * 根据类型查询分类
+     * @param type
+     * @return
+     */
+    List<Category> list(Integer type);
+}
diff --git a/sky-server/src/main/java/com/sky/mapper/DishMapper.java b/sky-server/src/main/java/com/sky/mapper/DishMapper.java
new file mode 100644
index 0000000..eece6f8
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/mapper/DishMapper.java
@@ -0,0 +1,17 @@
+package com.sky.mapper;
+
+import org.apache.ibatis.annotations.Mapper;
+import org.apache.ibatis.annotations.Select;
+
+@Mapper
+public interface DishMapper {
+
+    /**
+     * 根据分类id查询菜品数量
+     * @param categoryId
+     * @return
+     */
+    @Select("select count(id) from dish where category_id = #{categoryId}")
+    Integer countByCategoryId(Long categoryId);
+
+}
diff --git a/sky-server/src/main/java/com/sky/mapper/SetmealMapper.java b/sky-server/src/main/java/com/sky/mapper/SetmealMapper.java
new file mode 100644
index 0000000..03cfee7
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/mapper/SetmealMapper.java
@@ -0,0 +1,17 @@
+package com.sky.mapper;
+
+import org.apache.ibatis.annotations.Mapper;
+import org.apache.ibatis.annotations.Select;
+
+@Mapper
+public interface SetmealMapper {
+
+    /**
+     * 根据分类id查询套餐的数量
+     * @param id
+     * @return
+     */
+    @Select("select count(id) from setmeal where category_id = #{categoryId}")
+    Integer countByCategoryId(Long id);
+
+}
diff --git a/sky-server/src/main/java/com/sky/service/CategoryService.java b/sky-server/src/main/java/com/sky/service/CategoryService.java
new file mode 100644
index 0000000..85ecfd1
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/service/CategoryService.java
@@ -0,0 +1,49 @@
+package com.sky.service;
+
+import com.sky.dto.CategoryDTO;
+import com.sky.dto.CategoryPageQueryDTO;
+import com.sky.entity.Category;
+import com.sky.result.PageResult;
+import java.util.List;
+
+public interface CategoryService {
+
+    /**
+     * 新增分类
+     * @param categoryDTO
+     */
+    void save(CategoryDTO categoryDTO);
+
+    /**
+     * 分页查询
+     * @param categoryPageQueryDTO
+     * @return
+     */
+    PageResult pageQuery(CategoryPageQueryDTO categoryPageQueryDTO);
+
+    /**
+     * 根据id删除分类
+     * @param id
+     */
+    void deleteById(Long id);
+
+    /**
+     * 修改分类
+     * @param categoryDTO
+     */
+    void update(CategoryDTO categoryDTO);
+
+    /**
+     * 启用、禁用分类
+     * @param status
+     * @param id
+     */
+    void startOrStop(Integer status, Long id);
+
+    /**
+     * 根据类型查询分类
+     * @param type
+     * @return
+     */
+    List<Category> list(Integer type);
+}
diff --git a/sky-server/src/main/java/com/sky/service/impl/CategoryServiceImpl.java b/sky-server/src/main/java/com/sky/service/impl/CategoryServiceImpl.java
new file mode 100644
index 0000000..1c98f80
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/service/impl/CategoryServiceImpl.java
@@ -0,0 +1,132 @@
+package com.sky.service.impl;
+
+import com.github.pagehelper.Page;
+import com.github.pagehelper.PageHelper;
+import com.sky.constant.MessageConstant;
+import com.sky.constant.StatusConstant;
+import com.sky.context.BaseContext;
+import com.sky.dto.CategoryDTO;
+import com.sky.dto.CategoryPageQueryDTO;
+import com.sky.entity.Category;
+import com.sky.exception.DeletionNotAllowedException;
+import com.sky.mapper.CategoryMapper;
+import com.sky.mapper.DishMapper;
+import com.sky.mapper.SetmealMapper;
+import com.sky.result.PageResult;
+import com.sky.service.CategoryService;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.BeanUtils;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import java.time.LocalDateTime;
+import java.util.List;
+
+/**
+ * 分类业务层
+ */
+@Service
+@Slf4j
+public class CategoryServiceImpl implements CategoryService {
+
+    @Autowired
+    private CategoryMapper categoryMapper;
+    @Autowired
+    private DishMapper dishMapper;
+    @Autowired
+    private SetmealMapper setmealMapper;
+
+    /**
+     * 新增分类
+     * @param categoryDTO
+     */
+    public void save(CategoryDTO categoryDTO) {
+        Category category = new Category();
+        //属性拷贝
+        BeanUtils.copyProperties(categoryDTO, category);
+
+        //分类状态默认为禁用状态0
+        category.setStatus(StatusConstant.DISABLE);
+
+        //设置创建时间、修改时间、创建人、修改人
+        category.setCreateTime(LocalDateTime.now());
+        category.setUpdateTime(LocalDateTime.now());
+        category.setCreateUser(BaseContext.getCurrentId());
+        category.setUpdateUser(BaseContext.getCurrentId());
+
+        categoryMapper.insert(category);
+    }
+
+    /**
+     * 分页查询
+     * @param categoryPageQueryDTO
+     * @return
+     */
+    public PageResult pageQuery(CategoryPageQueryDTO categoryPageQueryDTO) {
+        PageHelper.startPage(categoryPageQueryDTO.getPage(),categoryPageQueryDTO.getPageSize());
+        //下一条sql进行分页，自动加入limit关键字分页
+        Page<Category> page = categoryMapper.pageQuery(categoryPageQueryDTO);
+        return new PageResult(page.getTotal(), page.getResult());
+    }
+
+    /**
+     * 根据id删除分类
+     * @param id
+     */
+    public void deleteById(Long id) {
+        //查询当前分类是否关联了菜品，如果关联了就抛出业务异常
+        Integer count = dishMapper.countByCategoryId(id);
+        if(count > 0){
+            //当前分类下有菜品，不能删除
+            throw new DeletionNotAllowedException(MessageConstant.CATEGORY_BE_RELATED_BY_DISH);
+        }
+
+        //查询当前分类是否关联了套餐，如果关联了就抛出业务异常
+        count = setmealMapper.countByCategoryId(id);
+        if(count > 0){
+            //当前分类下有菜品，不能删除
+            throw new DeletionNotAllowedException(MessageConstant.CATEGORY_BE_RELATED_BY_SETMEAL);
+        }
+
+        //删除分类数据
+        categoryMapper.deleteById(id);
+    }
+
+    /**
+     * 修改分类
+     * @param categoryDTO
+     */
+    public void update(CategoryDTO categoryDTO) {
+        Category category = new Category();
+        BeanUtils.copyProperties(categoryDTO,category);
+
+        //设置修改时间、修改人
+        category.setUpdateTime(LocalDateTime.now());
+        category.setUpdateUser(BaseContext.getCurrentId());
+
+        categoryMapper.update(category);
+    }
+
+    /**
+     * 启用、禁用分类
+     * @param status
+     * @param id
+     */
+    public void startOrStop(Integer status, Long id) {
+        Category category = Category.builder()
+                .id(id)
+                .status(status)
+                .updateTime(LocalDateTime.now())
+                .updateUser(BaseContext.getCurrentId())
+                .build();
+        categoryMapper.update(category);
+    }
+
+    /**
+     * 根据类型查询分类
+     * @param type
+     * @return
+     */
+    public List<Category> list(Integer type) {
+        return categoryMapper.list(type);
+    }
+}
diff --git a/sky-server/src/main/resources/mapper/CategoryMapper.xml b/sky-server/src/main/resources/mapper/CategoryMapper.xml
new file mode 100644
index 0000000..deee331
--- /dev/null
+++ b/sky-server/src/main/resources/mapper/CategoryMapper.xml
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
+<mapper namespace="com.sky.mapper.CategoryMapper">
+
+    <select id="pageQuery" resultType="com.sky.entity.Category">
+        select * from category
+        <where>
+            <if test="name != null and name != ''">
+                and name like concat('%',#{name},'%')
+            </if>
+            <if test="type != null">
+                and type = #{type}
+            </if>
+        </where>
+        order by sort asc , create_time desc
+    </select>
+
+    <update id="update" parameterType="Category">
+        update category
+        <set>
+            <if test="type != null">
+                type = #{type},
+            </if>
+            <if test="name != null">
+                name = #{name},
+            </if>
+            <if test="sort != null">
+                sort = #{sort},
+            </if>
+            <if test="status != null">
+                status = #{status},
+            </if>
+            <if test="updateTime != null">
+                update_time = #{updateTime},
+            </if>
+            <if test="updateUser != null">
+                update_user = #{updateUser}
+            </if>
+        </set>
+        where id = #{id}
+    </update>
+
+    <select id="list" resultType="Category">
+        select * from category
+        where status = 1
+        <if test="type != null">
+            and type = #{type}
+        </if>
+        order by sort asc,create_time desc
+    </select>
+</mapper>

commit c9db358fa04a7c8c567eae78c2e5e0352c594e2d
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Thu Jul 17 22:23:24 2025 +0800

    员工编辑功能开发

diff --git a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
index a2db5b0..f22bfe5 100644
--- a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
+++ b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
@@ -111,4 +111,29 @@ public class EmployeeController {
         return Result.success();
     }
 
+    /**
+     * 查询回显
+     */
+
+    @GetMapping("/{id}")
+    @ApiOperation("查询回显")
+    public Result getById(@PathVariable Long id){
+        log.info("查询id{}", id);
+        Employee employee=employeeService.getById(id);
+        return Result.success(employee);
+    }
+
+    /**
+     * 编辑员工
+     */
+
+    @PutMapping
+    @ApiOperation("编辑员工")
+    public Result update(@RequestBody EmployeeDTO employeeDTO){
+        log.info("编辑员工{}", employeeDTO);
+        employeeService.update(employeeDTO);
+        return Result.success();
+    }
+
+
 }
diff --git a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
index 12780af..a620277 100644
--- a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
+++ b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
@@ -39,4 +39,12 @@ public interface EmployeeMapper {
      * @param employee
      */
     void update(Employee employee);
+
+    /**
+     * 根据ID查询回显
+     * @param id
+     * @return
+     */
+    @Select("select * from employee where id =#{id}")
+    Employee getById(Long id);
 }
diff --git a/sky-server/src/main/java/com/sky/service/EmployeeService.java b/sky-server/src/main/java/com/sky/service/EmployeeService.java
index ca2c0d3..8dd4735 100644
--- a/sky-server/src/main/java/com/sky/service/EmployeeService.java
+++ b/sky-server/src/main/java/com/sky/service/EmployeeService.java
@@ -34,4 +34,17 @@ public interface EmployeeService {
      * @param id
      */
     void startOrStop(Integer status, Long id);
+
+    /**
+     * 根据ID查询回显
+     * @param id
+     * @return
+     */
+    Employee getById(Long id);
+
+    /**
+     * 编辑员工
+     * @param employeeDTO
+     */
+    void update(EmployeeDTO employeeDTO);
 }
diff --git a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
index eab46fa..c043ce6 100644
--- a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
+++ b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
@@ -30,6 +30,33 @@ public class EmployeeServiceImpl implements EmployeeService {
     @Autowired
     private EmployeeMapper employeeMapper;
 
+
+    /**
+     * 编辑员工
+     * @param employeeDTO
+     */
+    @Override
+    public void update(EmployeeDTO employeeDTO) {
+        Employee employee = new Employee();
+        BeanUtils.copyProperties(employeeDTO, employee);
+
+        employee.setUpdateTime(LocalDateTime.now());
+        employee.setUpdateUser(BaseContext.getCurrentId());
+
+        employeeMapper.update(employee);
+    }
+
+    /**
+     * 根据ID查询回显
+     * @param id
+     * @return
+     */
+    @Override
+    public Employee getById(Long id) {
+        Employee employee=employeeMapper.getById(id);
+        return employee;
+    }
+
     /**
      * 启用禁用员工账号
      * @param status

commit f48024b947fe9b4520616f305c4f6b0ecff7fe37
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Thu Jul 17 21:35:02 2025 +0800

    启用禁用员工账号功能开发

diff --git a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
index ef2cd89..a2db5b0 100644
--- a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
+++ b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
@@ -99,4 +99,16 @@ public class EmployeeController {
         return Result.success(pageResult);
     }
 
+    /**
+     * 启用禁用员工账号
+     */
+
+    @PostMapping("/status/{status}")
+    @ApiOperation("启用禁用员工账号")
+    public Result startOrStop(@PathVariable Integer status,Long id){
+        log.info("启用禁用员工账号：{},{}",status,id);
+        employeeService.startOrStop(status,id);//后绪步骤定义
+        return Result.success();
+    }
+
 }
diff --git a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
index dd548aa..12780af 100644
--- a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
+++ b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
@@ -27,5 +27,16 @@ public interface EmployeeMapper {
             "(#{name},#{username},#{password},#{phone},#{sex},#{idNumber},#{createTime},#{updateTime},#{createUser},#{updateUser},#{status})")
     void insert(Employee employee);
 
+    /**
+     * 员工分页查询
+     * @param employeePageQueryDTO
+     * @return
+     */
     Page<Employee> page(EmployeePageQueryDTO employeePageQueryDTO);
+
+    /**
+     * 根据主键动态修改属性
+     * @param employee
+     */
+    void update(Employee employee);
 }
diff --git a/sky-server/src/main/java/com/sky/service/EmployeeService.java b/sky-server/src/main/java/com/sky/service/EmployeeService.java
index 0f3094f..ca2c0d3 100644
--- a/sky-server/src/main/java/com/sky/service/EmployeeService.java
+++ b/sky-server/src/main/java/com/sky/service/EmployeeService.java
@@ -27,4 +27,11 @@ public interface EmployeeService {
      * @return
      */
     PageResult page(EmployeePageQueryDTO employeePageQueryDTO);
+
+    /**
+     * 启用禁用员工账号
+     * @param status
+     * @param id
+     */
+    void startOrStop(Integer status, Long id);
 }
diff --git a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
index b4aa449..eab46fa 100644
--- a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
+++ b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
@@ -30,6 +30,21 @@ public class EmployeeServiceImpl implements EmployeeService {
     @Autowired
     private EmployeeMapper employeeMapper;
 
+    /**
+     * 启用禁用员工账号
+     * @param status
+     * @param id
+     */
+    @Override
+    public void startOrStop(Integer status, Long id) {
+        Employee  employee=Employee.builder()
+                .id(id)
+                .status(status)
+                .build();
+        employeeMapper.update(employee);
+
+    }
+
     /**
      * 员工分页功能
      * @param employeePageQueryDTO
diff --git a/sky-server/src/main/resources/mapper/EmployeeMapper.xml b/sky-server/src/main/resources/mapper/EmployeeMapper.xml
index d3f6be9..77086b1 100644
--- a/sky-server/src/main/resources/mapper/EmployeeMapper.xml
+++ b/sky-server/src/main/resources/mapper/EmployeeMapper.xml
@@ -2,6 +2,21 @@
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
         "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
 <mapper namespace="com.sky.mapper.EmployeeMapper">
+    <update id="update" parameterType="Employee">
+        update employee
+        <set>
+            <if test="name != null">name = #{name},</if>
+            <if test="username != null">username = #{username},</if>
+            <if test="password != null">password = #{password},</if>
+            <if test="phone != null">phone = #{phone},</if>
+            <if test="sex != null">sex = #{sex},</if>
+            <if test="idNumber != null">id_Number = #{idNumber},</if>
+            <if test="updateTime != null">update_Time = #{updateTime},</if>
+            <if test="updateUser != null">update_User = #{updateUser},</if>
+            <if test="status != null">status = #{status},</if>
+        </set>
+        where id = #{id}
+    </update>
     <select id="page" resultType="com.sky.entity.Employee">
         SELECT * FROM employee
         <where>

commit 95474d3ae67977f92e05e834e214771ac199a2ca
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Thu Jul 17 20:55:04 2025 +0800

    员工分页查询功能开发

diff --git a/sky-server/src/main/java/com/sky/config/WebMvcConfiguration.java b/sky-server/src/main/java/com/sky/config/WebMvcConfiguration.java
index 98fc764..ff37921 100644
--- a/sky-server/src/main/java/com/sky/config/WebMvcConfiguration.java
+++ b/sky-server/src/main/java/com/sky/config/WebMvcConfiguration.java
@@ -1,10 +1,13 @@
 package com.sky.config;
 
 import com.sky.interceptor.JwtTokenAdminInterceptor;
+import com.sky.json.JacksonObjectMapper;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.http.converter.HttpMessageConverter;
+import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;
@@ -15,6 +18,8 @@ import springfox.documentation.service.ApiInfo;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spring.web.plugins.Docket;
 
+import java.util.List;
+
 /**
  * 配置类，注册web层相关组件
  */
@@ -65,4 +70,17 @@ public class WebMvcConfiguration extends WebMvcConfigurationSupport {
         registry.addResourceHandler("/doc.html").addResourceLocations("classpath:/META-INF/resources/");
         registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/");
     }
+    /**
+     * 扩展Spring MVC框架的消息转化器
+     * @param converters
+     */
+    protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {
+        log.info("扩展消息转换器...");
+        //创建一个消息转换器对象
+        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
+        //需要为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据
+        converter.setObjectMapper(new JacksonObjectMapper());
+        //将自己的消息转化器加入容器中
+        converters.add(0,converter);
+    }
 }
diff --git a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
index d075e4a..ef2cd89 100644
--- a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
+++ b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
@@ -3,8 +3,10 @@ package com.sky.controller.admin;
 import com.sky.constant.JwtClaimsConstant;
 import com.sky.dto.EmployeeDTO;
 import com.sky.dto.EmployeeLoginDTO;
+import com.sky.dto.EmployeePageQueryDTO;
 import com.sky.entity.Employee;
 import com.sky.properties.JwtProperties;
+import com.sky.result.PageResult;
 import com.sky.result.Result;
 import com.sky.service.EmployeeService;
 import com.sky.utils.JwtUtil;
@@ -14,10 +16,7 @@ import io.swagger.annotations.ApiModelProperty;
 import io.swagger.annotations.ApiOperation;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.bind.annotation.*;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -89,4 +88,15 @@ public class EmployeeController {
         return Result.success();
     }
 
+    /**
+     * 员工分页
+     */
+    @GetMapping("/page")
+    @ApiOperation("员工分页查询")
+    public Result<PageResult> page(EmployeePageQueryDTO  employeePageQueryDTO) {
+        log.info("员工分页查询", employeePageQueryDTO);
+        PageResult pageResult=employeeService.page(employeePageQueryDTO);
+        return Result.success(pageResult);
+    }
+
 }
diff --git a/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java b/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java
index b880123..d3d6f79 100644
--- a/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java
+++ b/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java
@@ -47,7 +47,7 @@ public class JwtTokenAdminInterceptor implements HandlerInterceptor {
             log.info("jwt校验:{}", token);
             Claims claims = JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);
             Long empId = Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());
-            log.info("当前员工id：", empId);
+            log.info("当前员工id：{}", empId);
             BaseContext.setCurrentId(empId);
             //3、通过，放行
             return true;
diff --git a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
index 69e1726..dd548aa 100644
--- a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
+++ b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
@@ -1,5 +1,7 @@
 package com.sky.mapper;
 
+import com.github.pagehelper.Page;
+import com.sky.dto.EmployeePageQueryDTO;
 import com.sky.entity.Employee;
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Mapper;
@@ -24,4 +26,6 @@ public interface EmployeeMapper {
             "values " +
             "(#{name},#{username},#{password},#{phone},#{sex},#{idNumber},#{createTime},#{updateTime},#{createUser},#{updateUser},#{status})")
     void insert(Employee employee);
+
+    Page<Employee> page(EmployeePageQueryDTO employeePageQueryDTO);
 }
diff --git a/sky-server/src/main/java/com/sky/service/EmployeeService.java b/sky-server/src/main/java/com/sky/service/EmployeeService.java
index e53f8d2..0f3094f 100644
--- a/sky-server/src/main/java/com/sky/service/EmployeeService.java
+++ b/sky-server/src/main/java/com/sky/service/EmployeeService.java
@@ -2,7 +2,9 @@ package com.sky.service;
 
 import com.sky.dto.EmployeeDTO;
 import com.sky.dto.EmployeeLoginDTO;
+import com.sky.dto.EmployeePageQueryDTO;
 import com.sky.entity.Employee;
+import com.sky.result.PageResult;
 
 public interface EmployeeService {
 
@@ -13,5 +15,16 @@ public interface EmployeeService {
      */
     Employee login(EmployeeLoginDTO employeeLoginDTO);
 
+    /**
+     * 添加员工
+     * @param employeeDTO
+     */
     void save(EmployeeDTO employeeDTO);
+
+    /**
+     * 员工分页功能
+     * @param employeePageQueryDTO
+     * @return
+     */
+    PageResult page(EmployeePageQueryDTO employeePageQueryDTO);
 }
diff --git a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
index 52d98db..b4aa449 100644
--- a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
+++ b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
@@ -1,16 +1,20 @@
 package com.sky.service.impl;
 
+import com.github.pagehelper.Page;
+import com.github.pagehelper.PageHelper;
 import com.sky.constant.MessageConstant;
 import com.sky.constant.PasswordConstant;
 import com.sky.constant.StatusConstant;
 import com.sky.context.BaseContext;
 import com.sky.dto.EmployeeDTO;
 import com.sky.dto.EmployeeLoginDTO;
+import com.sky.dto.EmployeePageQueryDTO;
 import com.sky.entity.Employee;
 import com.sky.exception.AccountLockedException;
 import com.sky.exception.AccountNotFoundException;
 import com.sky.exception.PasswordErrorException;
 import com.sky.mapper.EmployeeMapper;
+import com.sky.result.PageResult;
 import com.sky.service.EmployeeService;
 import org.springframework.beans.BeanUtils;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -18,6 +22,7 @@ import org.springframework.stereotype.Service;
 import org.springframework.util.DigestUtils;
 
 import java.time.LocalDateTime;
+import java.util.List;
 
 @Service
 public class EmployeeServiceImpl implements EmployeeService {
@@ -25,6 +30,24 @@ public class EmployeeServiceImpl implements EmployeeService {
     @Autowired
     private EmployeeMapper employeeMapper;
 
+    /**
+     * 员工分页功能
+     * @param employeePageQueryDTO
+     * @return
+     */
+    @Override
+    public PageResult page(EmployeePageQueryDTO employeePageQueryDTO) {
+        // select * from employee limit 0,10
+        //开始分页查询
+        PageHelper.startPage(employeePageQueryDTO.getPage(),
+                employeePageQueryDTO.getPageSize());
+
+        Page<Employee>page =employeeMapper.page(employeePageQueryDTO);
+        long total = page.getTotal();
+        List<Employee> records = page.getResult();
+
+        return new PageResult(total, records);
+    }
 
     /**
      * 新增员工
diff --git a/sky-server/src/main/resources/mapper/EmployeeMapper.xml b/sky-server/src/main/resources/mapper/EmployeeMapper.xml
index 3c3dc8d..d3f6be9 100644
--- a/sky-server/src/main/resources/mapper/EmployeeMapper.xml
+++ b/sky-server/src/main/resources/mapper/EmployeeMapper.xml
@@ -2,4 +2,14 @@
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
         "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
 <mapper namespace="com.sky.mapper.EmployeeMapper">
+    <select id="page" resultType="com.sky.entity.Employee">
+        SELECT * FROM employee
+        <where>
+            <if test="name != null and name != ''">
+                AND name LIKE CONCAT('%', #{name}, '%')
+            </if>
+        </where>
+        ORDER BY create_time DESC
+    </select>
+
 </mapper>

commit c9f8199f6c6767aed828447d81ba7a5ddc6520af
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Thu Jul 17 16:45:52 2025 +0800

    新增员工功能开发

diff --git a/sky-common/src/main/java/com/sky/constant/MessageConstant.java b/sky-common/src/main/java/com/sky/constant/MessageConstant.java
index c6b645d..d761bb3 100644
--- a/sky-common/src/main/java/com/sky/constant/MessageConstant.java
+++ b/sky-common/src/main/java/com/sky/constant/MessageConstant.java
@@ -23,5 +23,5 @@ public class MessageConstant {
     public static final String DISH_BE_RELATED_BY_SETMEAL = "当前菜品关联了套餐,不能删除";
     public static final String ORDER_STATUS_ERROR = "订单状态错误";
     public static final String ORDER_NOT_FOUND = "订单不存在";
-
+    public static final String ALREADY_EXISTS = "已存在";
 }
diff --git a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
index d0ccc0c..d075e4a 100644
--- a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
+++ b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
@@ -1,6 +1,7 @@
 package com.sky.controller.admin;
 
 import com.sky.constant.JwtClaimsConstant;
+import com.sky.dto.EmployeeDTO;
 import com.sky.dto.EmployeeLoginDTO;
 import com.sky.entity.Employee;
 import com.sky.properties.JwtProperties;
@@ -9,6 +10,7 @@ import com.sky.service.EmployeeService;
 import com.sky.utils.JwtUtil;
 import com.sky.vo.EmployeeLoginVO;
 import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiModelProperty;
 import io.swagger.annotations.ApiOperation;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -76,4 +78,15 @@ public class EmployeeController {
         return Result.success();
     }
 
+    /**
+     * 新增员工
+     */
+    @PostMapping
+    @ApiOperation("新增员工")
+    public Result save(@RequestBody EmployeeDTO employeeDTO) {
+        log.info("新增员工：{}", employeeDTO);
+        employeeService.save(employeeDTO);
+        return Result.success();
+    }
+
 }
diff --git a/sky-server/src/main/java/com/sky/handler/GlobalExceptionHandler.java b/sky-server/src/main/java/com/sky/handler/GlobalExceptionHandler.java
index 1a48598..67cc7ba 100644
--- a/sky-server/src/main/java/com/sky/handler/GlobalExceptionHandler.java
+++ b/sky-server/src/main/java/com/sky/handler/GlobalExceptionHandler.java
@@ -1,11 +1,14 @@
 package com.sky.handler;
 
+import com.sky.constant.MessageConstant;
 import com.sky.exception.BaseException;
 import com.sky.result.Result;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.RestControllerAdvice;
 
+import java.sql.SQLIntegrityConstraintViolationException;
+
 /**
  * 全局异常处理器，处理项目中抛出的业务异常
  */
@@ -24,4 +27,21 @@ public class GlobalExceptionHandler {
         return Result.error(ex.getMessage());
     }
 
+    /**
+     * 捕获SQL异常
+     */
+    @ExceptionHandler
+    public Result exceptionHandler(SQLIntegrityConstraintViolationException ex){
+        log.error("SQL异常", ex.getMessage());
+        String message = ex.getMessage();
+        if(message.contains("Duplicate entry")){
+            String[] split = message.split(" ");
+            String username = split[2];
+            String msg = username + MessageConstant.ALREADY_EXISTS;
+            return Result.error(msg);
+        }else {
+            return Result.error(MessageConstant.UNKNOWN_ERROR);
+        }
+    }
+
 }
diff --git a/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java b/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java
index e7c50b6..b880123 100644
--- a/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java
+++ b/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java
@@ -1,6 +1,7 @@
 package com.sky.interceptor;
 
 import com.sky.constant.JwtClaimsConstant;
+import com.sky.context.BaseContext;
 import com.sky.properties.JwtProperties;
 import com.sky.utils.JwtUtil;
 import io.jsonwebtoken.Claims;
@@ -47,6 +48,7 @@ public class JwtTokenAdminInterceptor implements HandlerInterceptor {
             Claims claims = JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);
             Long empId = Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());
             log.info("当前员工id：", empId);
+            BaseContext.setCurrentId(empId);
             //3、通过，放行
             return true;
         } catch (Exception ex) {
diff --git a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
index 550eda5..69e1726 100644
--- a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
+++ b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
@@ -1,6 +1,7 @@
 package com.sky.mapper;
 
 import com.sky.entity.Employee;
+import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Select;
 
@@ -15,4 +16,12 @@ public interface EmployeeMapper {
     @Select("select * from employee where username = #{username}")
     Employee getByUsername(String username);
 
+    /**
+     * 插入员工数据
+     * @param employee
+     */
+    @Insert("insert into employee (name, username, password, phone, sex, id_number, create_time, update_time, create_user, update_user,status) " +
+            "values " +
+            "(#{name},#{username},#{password},#{phone},#{sex},#{idNumber},#{createTime},#{updateTime},#{createUser},#{updateUser},#{status})")
+    void insert(Employee employee);
 }
diff --git a/sky-server/src/main/java/com/sky/service/EmployeeService.java b/sky-server/src/main/java/com/sky/service/EmployeeService.java
index d3e2ab2..e53f8d2 100644
--- a/sky-server/src/main/java/com/sky/service/EmployeeService.java
+++ b/sky-server/src/main/java/com/sky/service/EmployeeService.java
@@ -1,5 +1,6 @@
 package com.sky.service;
 
+import com.sky.dto.EmployeeDTO;
 import com.sky.dto.EmployeeLoginDTO;
 import com.sky.entity.Employee;
 
@@ -12,4 +13,5 @@ public interface EmployeeService {
      */
     Employee login(EmployeeLoginDTO employeeLoginDTO);
 
+    void save(EmployeeDTO employeeDTO);
 }
diff --git a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
index cc98c98..52d98db 100644
--- a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
+++ b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
@@ -1,7 +1,10 @@
 package com.sky.service.impl;
 
 import com.sky.constant.MessageConstant;
+import com.sky.constant.PasswordConstant;
 import com.sky.constant.StatusConstant;
+import com.sky.context.BaseContext;
+import com.sky.dto.EmployeeDTO;
 import com.sky.dto.EmployeeLoginDTO;
 import com.sky.entity.Employee;
 import com.sky.exception.AccountLockedException;
@@ -9,16 +12,59 @@ import com.sky.exception.AccountNotFoundException;
 import com.sky.exception.PasswordErrorException;
 import com.sky.mapper.EmployeeMapper;
 import com.sky.service.EmployeeService;
+import org.springframework.beans.BeanUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import org.springframework.util.DigestUtils;
 
+import java.time.LocalDateTime;
+
 @Service
 public class EmployeeServiceImpl implements EmployeeService {
 
     @Autowired
     private EmployeeMapper employeeMapper;
 
+
+    /**
+     * 新增员工
+     * @param employeeDTO
+     */
+    @Override
+    public void save(EmployeeDTO employeeDTO) {
+        Employee employee = new Employee();
+
+        //通过DTO部分导入员工类的属性
+        BeanUtils.copyProperties(employeeDTO, employee);
+        //剩下的属性要手动配置
+
+        //配置status属性
+        employee.setStatus(StatusConstant.ENABLE);
+
+        //DigestUtils.md5DigestAsHex(...)
+        //这是 Spring 框架提供的工具类，作用是：
+        //用 MD5 算法加密字节数组
+        //并返回一个 32位的十六进制字符串
+        //比如：
+        //"123456" 加密后是：e10adc3949ba59abbe56e057f20f883e
+        //
+
+
+        //employee.setPassword(...)
+        //把加密后的字符串设置为员工对象的密码。
+        employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));
+
+        //设置当前记录的创建时间和修改时间
+        employee.setCreateTime(LocalDateTime.now());
+        employee.setUpdateTime(LocalDateTime.now());
+
+        //设置当前记录创建人id和修改人id
+        employee.setCreateUser(BaseContext.getCurrentId());//目前写个假数据，后期修改
+        employee.setUpdateUser(BaseContext.getCurrentId());
+
+               employeeMapper.insert(employee);//后续步骤定义
+    }
+
     /**
      * 员工登录
      *

commit ea8e0ea1c740df4b7b6d5c11d2237a5d3d131c79
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Wed Jul 16 16:36:02 2025 +0800

    swagger正常使用

diff --git a/sky-pojo/src/main/java/com/sky/dto/EmployeeDTO.java b/sky-pojo/src/main/java/com/sky/dto/EmployeeDTO.java
index 766e37d..db784e2 100644
--- a/sky-pojo/src/main/java/com/sky/dto/EmployeeDTO.java
+++ b/sky-pojo/src/main/java/com/sky/dto/EmployeeDTO.java
@@ -1,5 +1,6 @@
 package com.sky.dto;
 
+import io.swagger.annotations.ApiModel;
 import lombok.Data;
 
 import java.io.Serializable;
diff --git a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
index 5857f07..d0ccc0c 100644
--- a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
+++ b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
@@ -8,6 +8,8 @@ import com.sky.result.Result;
 import com.sky.service.EmployeeService;
 import com.sky.utils.JwtUtil;
 import com.sky.vo.EmployeeLoginVO;
+import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.PostMapping;
@@ -24,6 +26,7 @@ import java.util.Map;
 @RestController
 @RequestMapping("/admin/employee")
 @Slf4j
+@Api(tags = "员工相关接口")
 public class EmployeeController {
 
     @Autowired
@@ -38,6 +41,7 @@ public class EmployeeController {
      * @return
      */
     @PostMapping("/login")
+    @ApiOperation(value = "员工登录")
     public Result<EmployeeLoginVO> login(@RequestBody EmployeeLoginDTO employeeLoginDTO) {
         log.info("员工登录：{}", employeeLoginDTO);
 
@@ -67,6 +71,7 @@ public class EmployeeController {
      * @return
      */
     @PostMapping("/logout")
+    @ApiOperation("员工退出")
     public Result<String> logout() {
         return Result.success();
     }
diff --git a/sky-server/src/main/resources/application-dev.yml b/sky-server/src/main/resources/application-dev.yml
index 0339477..0342a70 100644
--- a/sky-server/src/main/resources/application-dev.yml
+++ b/sky-server/src/main/resources/application-dev.yml
@@ -5,4 +5,4 @@ sky:
     port: 3306
     database: sky_take_out
     username: root
-    password: root
+    password: "123456"

commit 99a29de344d45f1a46d1eee9af9abf5cd35a9671
Author: Chen-junda-cell <147970752+Chen-junda-cell@users.noreply.github.com>
Date:   Tue Jul 15 15:15:24 2025 +0800

    苍穹外卖项目初始代码

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..3df42cc
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,6 @@
+**/target/
+.idea
+*.iml
+*.class
+*Test.java
+**/test/
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..b10da2e
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,127 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <groupId>org.springframework.boot</groupId>
+        <version>2.7.3</version>
+    </parent>
+    <groupId>com.sky</groupId>
+    <artifactId>sky-take-out</artifactId>
+    <packaging>pom</packaging>
+    <version>1.0-SNAPSHOT</version>
+    <modules>
+        <module>sky-common</module>
+        <module>sky-pojo</module>
+        <module>sky-server</module>
+    </modules>
+    <properties>
+        <mybatis.spring>2.2.0</mybatis.spring>
+        <lombok>1.18.20</lombok>
+        <fastjson>1.2.76</fastjson>
+        <commons.lang>2.6</commons.lang>
+        <druid>1.2.1</druid>
+        <pagehelper>1.3.0</pagehelper>
+        <aliyun.sdk.oss>3.10.2</aliyun.sdk.oss>
+        <knife4j>3.0.2</knife4j>
+        <aspectj>1.9.4</aspectj>
+        <jjwt>0.9.1</jjwt>
+        <jaxb-api>2.3.1</jaxb-api>
+        <poi>3.16</poi>
+    </properties>
+    <dependencyManagement>
+        <dependencies>
+            <dependency>
+                <groupId>org.mybatis.spring.boot</groupId>
+                <artifactId>mybatis-spring-boot-starter</artifactId>
+                <version>${mybatis.spring}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.projectlombok</groupId>
+                <artifactId>lombok</artifactId>
+                <version>${lombok}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>com.alibaba</groupId>
+                <artifactId>fastjson</artifactId>
+                <version>${fastjson}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>commons-lang</groupId>
+                <artifactId>commons-lang</artifactId>
+                <version>${commons.lang}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>com.alibaba</groupId>
+                <artifactId>druid-spring-boot-starter</artifactId>
+                <version>${druid}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>com.github.pagehelper</groupId>
+                <artifactId>pagehelper-spring-boot-starter</artifactId>
+                <version>${pagehelper}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>com.github.xiaoymin</groupId>
+                <artifactId>knife4j-spring-boot-starter</artifactId>
+                <version>${knife4j}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.aspectj</groupId>
+                <artifactId>aspectjrt</artifactId>
+                <version>${aspectj}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>org.aspectj</groupId>
+                <artifactId>aspectjweaver</artifactId>
+                <version>${aspectj}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>io.jsonwebtoken</groupId>
+                <artifactId>jjwt</artifactId>
+                <version>${jjwt}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>com.aliyun.oss</groupId>
+                <artifactId>aliyun-sdk-oss</artifactId>
+                <version>${aliyun.sdk.oss}</version>
+            </dependency>
+
+            <dependency>
+                <groupId>javax.xml.bind</groupId>
+                <artifactId>jaxb-api</artifactId>
+                <version>${jaxb-api}</version>
+            </dependency>
+
+            <!-- poi -->
+            <dependency>
+                <groupId>org.apache.poi</groupId>
+                <artifactId>poi</artifactId>
+                <version>${poi}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.apache.poi</groupId>
+                <artifactId>poi-ooxml</artifactId>
+                <version>${poi}</version>
+            </dependency>
+            <!--微信支付-->
+            <dependency>
+                <groupId>com.github.wechatpay-apiv3</groupId>
+                <artifactId>wechatpay-apache-httpclient</artifactId>
+                <version>0.4.8</version>
+            </dependency>
+        </dependencies>
+    </dependencyManagement>
+</project>
diff --git a/sky-common/pom.xml b/sky-common/pom.xml
new file mode 100644
index 0000000..3a374b4
--- /dev/null
+++ b/sky-common/pom.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>sky-take-out</artifactId>
+        <groupId>com.sky</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>sky-common</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.alibaba</groupId>
+            <artifactId>fastjson</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>commons-lang</groupId>
+            <artifactId>commons-lang</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-json</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>io.jsonwebtoken</groupId>
+            <artifactId>jjwt</artifactId>
+        </dependency>
+        <!--支持配置属性类，yml文件中可以提示配置项-->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-configuration-processor</artifactId>
+            <optional>true</optional>
+        </dependency>
+        <dependency>
+            <groupId>com.aliyun.oss</groupId>
+            <artifactId>aliyun-sdk-oss</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>javax.xml.bind</groupId>
+            <artifactId>jaxb-api</artifactId>
+        </dependency>
+        <!--微信支付-->
+        <dependency>
+            <groupId>com.github.wechatpay-apiv3</groupId>
+            <artifactId>wechatpay-apache-httpclient</artifactId>
+        </dependency>
+    </dependencies>
+</project>
diff --git a/sky-common/src/main/java/com/sky/constant/AutoFillConstant.java b/sky-common/src/main/java/com/sky/constant/AutoFillConstant.java
new file mode 100644
index 0000000..7d5caf1
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/constant/AutoFillConstant.java
@@ -0,0 +1,14 @@
+package com.sky.constant;
+
+/**
+ * 公共字段自动填充相关常量
+ */
+public class AutoFillConstant {
+    /**
+     * 实体类中的方法名称
+     */
+    public static final String SET_CREATE_TIME = "setCreateTime";
+    public static final String SET_UPDATE_TIME = "setUpdateTime";
+    public static final String SET_CREATE_USER = "setCreateUser";
+    public static final String SET_UPDATE_USER = "setUpdateUser";
+}
diff --git a/sky-common/src/main/java/com/sky/constant/JwtClaimsConstant.java b/sky-common/src/main/java/com/sky/constant/JwtClaimsConstant.java
new file mode 100644
index 0000000..ae2507e
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/constant/JwtClaimsConstant.java
@@ -0,0 +1,11 @@
+package com.sky.constant;
+
+public class JwtClaimsConstant {
+
+    public static final String EMP_ID = "empId";
+    public static final String USER_ID = "userId";
+    public static final String PHONE = "phone";
+    public static final String USERNAME = "username";
+    public static final String NAME = "name";
+
+}
diff --git a/sky-common/src/main/java/com/sky/constant/MessageConstant.java b/sky-common/src/main/java/com/sky/constant/MessageConstant.java
new file mode 100644
index 0000000..c6b645d
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/constant/MessageConstant.java
@@ -0,0 +1,27 @@
+package com.sky.constant;
+
+/**
+ * 信息提示常量类
+ */
+public class MessageConstant {
+
+    public static final String PASSWORD_ERROR = "密码错误";
+    public static final String ACCOUNT_NOT_FOUND = "账号不存在";
+    public static final String ACCOUNT_LOCKED = "账号被锁定";
+    public static final String UNKNOWN_ERROR = "未知错误";
+    public static final String USER_NOT_LOGIN = "用户未登录";
+    public static final String CATEGORY_BE_RELATED_BY_SETMEAL = "当前分类关联了套餐,不能删除";
+    public static final String CATEGORY_BE_RELATED_BY_DISH = "当前分类关联了菜品,不能删除";
+    public static final String SHOPPING_CART_IS_NULL = "购物车数据为空，不能下单";
+    public static final String ADDRESS_BOOK_IS_NULL = "用户地址为空，不能下单";
+    public static final String LOGIN_FAILED = "登录失败";
+    public static final String UPLOAD_FAILED = "文件上传失败";
+    public static final String SETMEAL_ENABLE_FAILED = "套餐内包含未启售菜品，无法启售";
+    public static final String PASSWORD_EDIT_FAILED = "密码修改失败";
+    public static final String DISH_ON_SALE = "起售中的菜品不能删除";
+    public static final String SETMEAL_ON_SALE = "起售中的套餐不能删除";
+    public static final String DISH_BE_RELATED_BY_SETMEAL = "当前菜品关联了套餐,不能删除";
+    public static final String ORDER_STATUS_ERROR = "订单状态错误";
+    public static final String ORDER_NOT_FOUND = "订单不存在";
+
+}
diff --git a/sky-common/src/main/java/com/sky/constant/PasswordConstant.java b/sky-common/src/main/java/com/sky/constant/PasswordConstant.java
new file mode 100644
index 0000000..752f81c
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/constant/PasswordConstant.java
@@ -0,0 +1,10 @@
+package com.sky.constant;
+
+/**
+ * 密码常量
+ */
+public class PasswordConstant {
+
+    public static final String DEFAULT_PASSWORD = "123456";
+
+}
diff --git a/sky-common/src/main/java/com/sky/constant/StatusConstant.java b/sky-common/src/main/java/com/sky/constant/StatusConstant.java
new file mode 100644
index 0000000..e575372
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/constant/StatusConstant.java
@@ -0,0 +1,13 @@
+package com.sky.constant;
+
+/**
+ * 状态常量，启用或者禁用
+ */
+public class StatusConstant {
+
+    //启用
+    public static final Integer ENABLE = 1;
+
+    //禁用
+    public static final Integer DISABLE = 0;
+}
diff --git a/sky-common/src/main/java/com/sky/context/BaseContext.java b/sky-common/src/main/java/com/sky/context/BaseContext.java
new file mode 100644
index 0000000..f76b305
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/context/BaseContext.java
@@ -0,0 +1,19 @@
+package com.sky.context;
+
+public class BaseContext {
+
+    public static ThreadLocal<Long> threadLocal = new ThreadLocal<>();
+
+    public static void setCurrentId(Long id) {
+        threadLocal.set(id);
+    }
+
+    public static Long getCurrentId() {
+        return threadLocal.get();
+    }
+
+    public static void removeCurrentId() {
+        threadLocal.remove();
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/enumeration/OperationType.java b/sky-common/src/main/java/com/sky/enumeration/OperationType.java
new file mode 100644
index 0000000..99e5795
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/enumeration/OperationType.java
@@ -0,0 +1,18 @@
+package com.sky.enumeration;
+
+/**
+ * 数据库操作类型
+ */
+public enum OperationType {
+
+    /**
+     * 更新操作
+     */
+    UPDATE,
+
+    /**
+     * 插入操作
+     */
+    INSERT
+
+}
diff --git a/sky-common/src/main/java/com/sky/exception/AccountLockedException.java b/sky-common/src/main/java/com/sky/exception/AccountLockedException.java
new file mode 100644
index 0000000..ded9040
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/AccountLockedException.java
@@ -0,0 +1,15 @@
+package com.sky.exception;
+
+/**
+ * 账号被锁定异常
+ */
+public class AccountLockedException extends BaseException {
+
+    public AccountLockedException() {
+    }
+
+    public AccountLockedException(String msg) {
+        super(msg);
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/exception/AccountNotFoundException.java b/sky-common/src/main/java/com/sky/exception/AccountNotFoundException.java
new file mode 100644
index 0000000..147f9f7
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/AccountNotFoundException.java
@@ -0,0 +1,15 @@
+package com.sky.exception;
+
+/**
+ * 账号不存在异常
+ */
+public class AccountNotFoundException extends BaseException {
+
+    public AccountNotFoundException() {
+    }
+
+    public AccountNotFoundException(String msg) {
+        super(msg);
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/exception/AddressBookBusinessException.java b/sky-common/src/main/java/com/sky/exception/AddressBookBusinessException.java
new file mode 100644
index 0000000..a8ce784
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/AddressBookBusinessException.java
@@ -0,0 +1,9 @@
+package com.sky.exception;
+
+public class AddressBookBusinessException extends BaseException {
+
+    public AddressBookBusinessException(String msg) {
+        super(msg);
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/exception/BaseException.java b/sky-common/src/main/java/com/sky/exception/BaseException.java
new file mode 100644
index 0000000..572801b
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/BaseException.java
@@ -0,0 +1,15 @@
+package com.sky.exception;
+
+/**
+ * 业务异常
+ */
+public class BaseException extends RuntimeException {
+
+    public BaseException() {
+    }
+
+    public BaseException(String msg) {
+        super(msg);
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/exception/DeletionNotAllowedException.java b/sky-common/src/main/java/com/sky/exception/DeletionNotAllowedException.java
new file mode 100644
index 0000000..126c3b3
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/DeletionNotAllowedException.java
@@ -0,0 +1,9 @@
+package com.sky.exception;
+
+public class DeletionNotAllowedException extends BaseException {
+
+    public DeletionNotAllowedException(String msg) {
+        super(msg);
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/exception/LoginFailedException.java b/sky-common/src/main/java/com/sky/exception/LoginFailedException.java
new file mode 100644
index 0000000..6aa80a6
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/LoginFailedException.java
@@ -0,0 +1,10 @@
+package com.sky.exception;
+
+/**
+ * 登录失败
+ */
+public class LoginFailedException extends BaseException{
+    public LoginFailedException(String msg){
+        super(msg);
+    }
+}
diff --git a/sky-common/src/main/java/com/sky/exception/OrderBusinessException.java b/sky-common/src/main/java/com/sky/exception/OrderBusinessException.java
new file mode 100644
index 0000000..b4221b8
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/OrderBusinessException.java
@@ -0,0 +1,9 @@
+package com.sky.exception;
+
+public class OrderBusinessException extends BaseException {
+
+    public OrderBusinessException(String msg) {
+        super(msg);
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/exception/PasswordEditFailedException.java b/sky-common/src/main/java/com/sky/exception/PasswordEditFailedException.java
new file mode 100644
index 0000000..adf47d9
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/PasswordEditFailedException.java
@@ -0,0 +1,12 @@
+package com.sky.exception;
+
+/**
+ * 密码修改失败异常
+ */
+public class PasswordEditFailedException extends BaseException{
+
+    public PasswordEditFailedException(String msg){
+        super(msg);
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/exception/PasswordErrorException.java b/sky-common/src/main/java/com/sky/exception/PasswordErrorException.java
new file mode 100644
index 0000000..c0f150d
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/PasswordErrorException.java
@@ -0,0 +1,15 @@
+package com.sky.exception;
+
+/**
+ * 密码错误异常
+ */
+public class PasswordErrorException extends BaseException {
+
+    public PasswordErrorException() {
+    }
+
+    public PasswordErrorException(String msg) {
+        super(msg);
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/exception/SetmealEnableFailedException.java b/sky-common/src/main/java/com/sky/exception/SetmealEnableFailedException.java
new file mode 100644
index 0000000..a9925ba
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/SetmealEnableFailedException.java
@@ -0,0 +1,13 @@
+package com.sky.exception;
+
+/**
+ * 套餐启用失败异常
+ */
+public class SetmealEnableFailedException extends BaseException {
+
+    public SetmealEnableFailedException(){}
+
+    public SetmealEnableFailedException(String msg){
+        super(msg);
+    }
+}
diff --git a/sky-common/src/main/java/com/sky/exception/ShoppingCartBusinessException.java b/sky-common/src/main/java/com/sky/exception/ShoppingCartBusinessException.java
new file mode 100644
index 0000000..7f05e20
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/ShoppingCartBusinessException.java
@@ -0,0 +1,9 @@
+package com.sky.exception;
+
+public class ShoppingCartBusinessException extends BaseException {
+
+    public ShoppingCartBusinessException(String msg) {
+        super(msg);
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/exception/UserNotLoginException.java b/sky-common/src/main/java/com/sky/exception/UserNotLoginException.java
new file mode 100644
index 0000000..746b557
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/exception/UserNotLoginException.java
@@ -0,0 +1,12 @@
+package com.sky.exception;
+
+public class UserNotLoginException extends BaseException {
+
+    public UserNotLoginException() {
+    }
+
+    public UserNotLoginException(String msg) {
+        super(msg);
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/json/JacksonObjectMapper.java b/sky-common/src/main/java/com/sky/json/JacksonObjectMapper.java
new file mode 100644
index 0000000..c181eda
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/json/JacksonObjectMapper.java
@@ -0,0 +1,51 @@
+package com.sky.json;
+
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;
+import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
+import com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;
+import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;
+import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
+import com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.format.DateTimeFormatter;
+
+import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
+
+/**
+ * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象
+ * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]
+ * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]
+ */
+public class JacksonObjectMapper extends ObjectMapper {
+
+    public static final String DEFAULT_DATE_FORMAT = "yyyy-MM-dd";
+    //public static final String DEFAULT_DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
+    public static final String DEFAULT_DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm";
+    public static final String DEFAULT_TIME_FORMAT = "HH:mm:ss";
+
+    public JacksonObjectMapper() {
+        super();
+        //收到未知属性时不报异常
+        this.configure(FAIL_ON_UNKNOWN_PROPERTIES, false);
+
+        //反序列化时，属性不存在的兼容处理
+        this.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
+
+        SimpleModule simpleModule = new SimpleModule()
+                .addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))
+                .addDeserializer(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))
+                .addDeserializer(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))
+                .addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))
+                .addSerializer(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))
+                .addSerializer(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));
+
+        //注册功能模块 例如，可以添加自定义序列化器和反序列化器
+        this.registerModule(simpleModule);
+    }
+}
diff --git a/sky-common/src/main/java/com/sky/properties/AliOssProperties.java b/sky-common/src/main/java/com/sky/properties/AliOssProperties.java
new file mode 100644
index 0000000..4e6c625
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/properties/AliOssProperties.java
@@ -0,0 +1,17 @@
+package com.sky.properties;
+
+import lombok.Data;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.stereotype.Component;
+
+@Component
+@ConfigurationProperties(prefix = "sky.alioss")
+@Data
+public class AliOssProperties {
+
+    private String endpoint;
+    private String accessKeyId;
+    private String accessKeySecret;
+    private String bucketName;
+
+}
diff --git a/sky-common/src/main/java/com/sky/properties/JwtProperties.java b/sky-common/src/main/java/com/sky/properties/JwtProperties.java
new file mode 100644
index 0000000..c2c7525
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/properties/JwtProperties.java
@@ -0,0 +1,26 @@
+package com.sky.properties;
+
+import lombok.Data;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.stereotype.Component;
+
+@Component
+@ConfigurationProperties(prefix = "sky.jwt")
+@Data
+public class JwtProperties {
+
+    /**
+     * 管理端员工生成jwt令牌相关配置
+     */
+    private String adminSecretKey;
+    private long adminTtl;
+    private String adminTokenName;
+
+    /**
+     * 用户端微信用户生成jwt令牌相关配置
+     */
+    private String userSecretKey;
+    private long userTtl;
+    private String userTokenName;
+
+}
diff --git a/sky-common/src/main/java/com/sky/properties/WeChatProperties.java b/sky-common/src/main/java/com/sky/properties/WeChatProperties.java
new file mode 100644
index 0000000..06a9fa2
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/properties/WeChatProperties.java
@@ -0,0 +1,23 @@
+package com.sky.properties;
+
+import lombok.Data;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.stereotype.Component;
+
+@Component
+@ConfigurationProperties(prefix = "sky.wechat")
+@Data
+public class WeChatProperties {
+
+    private String appid; //小程序的appid
+    private String secret; //小程序的秘钥
+    private String mchid; //商户号
+    private String mchSerialNo; //商户API证书的证书序列号
+    private String privateKeyFilePath; //商户私钥文件
+    private String apiV3Key; //证书解密的密钥
+    private String weChatPayCertFilePath; //平台证书
+    private String notifyUrl; //支付成功的回调地址
+    private String refundNotifyUrl; //退款成功的回调地址
+
+}
diff --git a/sky-common/src/main/java/com/sky/result/PageResult.java b/sky-common/src/main/java/com/sky/result/PageResult.java
new file mode 100644
index 0000000..4da4d7a
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/result/PageResult.java
@@ -0,0 +1,22 @@
+package com.sky.result;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.util.List;
+
+/**
+ * 封装分页查询结果
+ */
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class PageResult implements Serializable {
+
+    private long total; //总记录数
+
+    private List records; //当前页数据集合
+
+}
diff --git a/sky-common/src/main/java/com/sky/result/Result.java b/sky-common/src/main/java/com/sky/result/Result.java
new file mode 100644
index 0000000..9cb3762
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/result/Result.java
@@ -0,0 +1,38 @@
+package com.sky.result;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+/**
+ * 后端统一返回结果
+ * @param <T>
+ */
+@Data
+public class Result<T> implements Serializable {
+
+    private Integer code; //编码：1成功，0和其它数字为失败
+    private String msg; //错误信息
+    private T data; //数据
+
+    public static <T> Result<T> success() {
+        Result<T> result = new Result<T>();
+        result.code = 1;
+        return result;
+    }
+
+    public static <T> Result<T> success(T object) {
+        Result<T> result = new Result<T>();
+        result.data = object;
+        result.code = 1;
+        return result;
+    }
+
+    public static <T> Result<T> error(String msg) {
+        Result result = new Result();
+        result.msg = msg;
+        result.code = 0;
+        return result;
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/utils/AliOssUtil.java b/sky-common/src/main/java/com/sky/utils/AliOssUtil.java
new file mode 100644
index 0000000..c53114d
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/utils/AliOssUtil.java
@@ -0,0 +1,68 @@
+package com.sky.utils;
+
+import com.aliyun.oss.ClientException;
+import com.aliyun.oss.OSS;
+import com.aliyun.oss.OSSClientBuilder;
+import com.aliyun.oss.OSSException;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.extern.slf4j.Slf4j;
+import java.io.ByteArrayInputStream;
+
+@Data
+@AllArgsConstructor
+@Slf4j
+public class AliOssUtil {
+
+    private String endpoint;
+    private String accessKeyId;
+    private String accessKeySecret;
+    private String bucketName;
+
+    /**
+     * 文件上传
+     *
+     * @param bytes
+     * @param objectName
+     * @return
+     */
+    public String upload(byte[] bytes, String objectName) {
+
+        // 创建OSSClient实例。
+        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);
+
+        try {
+            // 创建PutObject请求。
+            ossClient.putObject(bucketName, objectName, new ByteArrayInputStream(bytes));
+        } catch (OSSException oe) {
+            System.out.println("Caught an OSSException, which means your request made it to OSS, "
+                    + "but was rejected with an error response for some reason.");
+            System.out.println("Error Message:" + oe.getErrorMessage());
+            System.out.println("Error Code:" + oe.getErrorCode());
+            System.out.println("Request ID:" + oe.getRequestId());
+            System.out.println("Host ID:" + oe.getHostId());
+        } catch (ClientException ce) {
+            System.out.println("Caught an ClientException, which means the client encountered "
+                    + "a serious internal problem while trying to communicate with OSS, "
+                    + "such as not being able to access the network.");
+            System.out.println("Error Message:" + ce.getMessage());
+        } finally {
+            if (ossClient != null) {
+                ossClient.shutdown();
+            }
+        }
+
+        //文件访问路径规则 https://BucketName.Endpoint/ObjectName
+        StringBuilder stringBuilder = new StringBuilder("https://");
+        stringBuilder
+                .append(bucketName)
+                .append(".")
+                .append(endpoint)
+                .append("/")
+                .append(objectName);
+
+        log.info("文件上传到:{}", stringBuilder.toString());
+
+        return stringBuilder.toString();
+    }
+}
diff --git a/sky-common/src/main/java/com/sky/utils/HttpClientUtil.java b/sky-common/src/main/java/com/sky/utils/HttpClientUtil.java
new file mode 100644
index 0000000..a10dbc4
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/utils/HttpClientUtil.java
@@ -0,0 +1,179 @@
+package com.sky.utils;
+
+import com.alibaba.fastjson.JSONObject;
+import org.apache.http.NameValuePair;
+import org.apache.http.client.config.RequestConfig;
+import org.apache.http.client.entity.UrlEncodedFormEntity;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.utils.URIBuilder;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.message.BasicNameValuePair;
+import org.apache.http.util.EntityUtils;
+
+import java.io.IOException;
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Http工具类
+ */
+public class HttpClientUtil {
+
+    static final  int TIMEOUT_MSEC = 5 * 1000;
+
+    /**
+     * 发送GET方式请求
+     * @param url
+     * @param paramMap
+     * @return
+     */
+    public static String doGet(String url,Map<String,String> paramMap){
+        // 创建Httpclient对象
+        CloseableHttpClient httpClient = HttpClients.createDefault();
+
+        String result = "";
+        CloseableHttpResponse response = null;
+
+        try{
+            URIBuilder builder = new URIBuilder(url);
+            if(paramMap != null){
+                for (String key : paramMap.keySet()) {
+                    builder.addParameter(key,paramMap.get(key));
+                }
+            }
+            URI uri = builder.build();
+
+            //创建GET请求
+            HttpGet httpGet = new HttpGet(uri);
+
+            //发送请求
+            response = httpClient.execute(httpGet);
+
+            //判断响应状态
+            if(response.getStatusLine().getStatusCode() == 200){
+                result = EntityUtils.toString(response.getEntity(),"UTF-8");
+            }
+        }catch (Exception e){
+            e.printStackTrace();
+        }finally {
+            try {
+                response.close();
+                httpClient.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+        return result;
+    }
+
+    /**
+     * 发送POST方式请求
+     * @param url
+     * @param paramMap
+     * @return
+     * @throws IOException
+     */
+    public static String doPost(String url, Map<String, String> paramMap) throws IOException {
+        // 创建Httpclient对象
+        CloseableHttpClient httpClient = HttpClients.createDefault();
+        CloseableHttpResponse response = null;
+        String resultString = "";
+
+        try {
+            // 创建Http Post请求
+            HttpPost httpPost = new HttpPost(url);
+
+            // 创建参数列表
+            if (paramMap != null) {
+                List<NameValuePair> paramList = new ArrayList();
+                for (Map.Entry<String, String> param : paramMap.entrySet()) {
+                    paramList.add(new BasicNameValuePair(param.getKey(), param.getValue()));
+                }
+                // 模拟表单
+                UrlEncodedFormEntity entity = new UrlEncodedFormEntity(paramList);
+                httpPost.setEntity(entity);
+            }
+
+            httpPost.setConfig(builderRequestConfig());
+
+            // 执行http请求
+            response = httpClient.execute(httpPost);
+
+            resultString = EntityUtils.toString(response.getEntity(), "UTF-8");
+        } catch (Exception e) {
+            throw e;
+        } finally {
+            try {
+                response.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+        return resultString;
+    }
+
+    /**
+     * 发送POST方式请求
+     * @param url
+     * @param paramMap
+     * @return
+     * @throws IOException
+     */
+    public static String doPost4Json(String url, Map<String, String> paramMap) throws IOException {
+        // 创建Httpclient对象
+        CloseableHttpClient httpClient = HttpClients.createDefault();
+        CloseableHttpResponse response = null;
+        String resultString = "";
+
+        try {
+            // 创建Http Post请求
+            HttpPost httpPost = new HttpPost(url);
+
+            if (paramMap != null) {
+                //构造json格式数据
+                JSONObject jsonObject = new JSONObject();
+                for (Map.Entry<String, String> param : paramMap.entrySet()) {
+                    jsonObject.put(param.getKey(),param.getValue());
+                }
+                StringEntity entity = new StringEntity(jsonObject.toString(),"utf-8");
+                //设置请求编码
+                entity.setContentEncoding("utf-8");
+                //设置数据类型
+                entity.setContentType("application/json");
+                httpPost.setEntity(entity);
+            }
+
+            httpPost.setConfig(builderRequestConfig());
+
+            // 执行http请求
+            response = httpClient.execute(httpPost);
+
+            resultString = EntityUtils.toString(response.getEntity(), "UTF-8");
+        } catch (Exception e) {
+            throw e;
+        } finally {
+            try {
+                response.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+        return resultString;
+    }
+    private static RequestConfig builderRequestConfig() {
+        return RequestConfig.custom()
+                .setConnectTimeout(TIMEOUT_MSEC)
+                .setConnectionRequestTimeout(TIMEOUT_MSEC)
+                .setSocketTimeout(TIMEOUT_MSEC).build();
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/utils/JwtUtil.java b/sky-common/src/main/java/com/sky/utils/JwtUtil.java
new file mode 100644
index 0000000..3ebf2f4
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/utils/JwtUtil.java
@@ -0,0 +1,58 @@
+package com.sky.utils;
+
+import io.jsonwebtoken.Claims;
+import io.jsonwebtoken.JwtBuilder;
+import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.SignatureAlgorithm;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.util.Map;
+
+public class JwtUtil {
+    /**
+     * 生成jwt
+     * 使用Hs256算法, 私匙使用固定秘钥
+     *
+     * @param secretKey jwt秘钥
+     * @param ttlMillis jwt过期时间(毫秒)
+     * @param claims    设置的信息
+     * @return
+     */
+    public static String createJWT(String secretKey, long ttlMillis, Map<String, Object> claims) {
+        // 指定签名的时候使用的签名算法，也就是header那部分
+        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;
+
+        // 生成JWT的时间
+        long expMillis = System.currentTimeMillis() + ttlMillis;
+        Date exp = new Date(expMillis);
+
+        // 设置jwt的body
+        JwtBuilder builder = Jwts.builder()
+                // 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的
+                .setClaims(claims)
+                // 设置签名使用的签名算法和签名使用的秘钥
+                .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))
+                // 设置过期时间
+                .setExpiration(exp);
+
+        return builder.compact();
+    }
+
+    /**
+     * Token解密
+     *
+     * @param secretKey jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个
+     * @param token     加密后的token
+     * @return
+     */
+    public static Claims parseJWT(String secretKey, String token) {
+        // 得到DefaultJwtParser
+        Claims claims = Jwts.parser()
+                // 设置签名的秘钥
+                .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))
+                // 设置需要解析的jwt
+                .parseClaimsJws(token).getBody();
+        return claims;
+    }
+
+}
diff --git a/sky-common/src/main/java/com/sky/utils/WeChatPayUtil.java b/sky-common/src/main/java/com/sky/utils/WeChatPayUtil.java
new file mode 100644
index 0000000..804d7ed
--- /dev/null
+++ b/sky-common/src/main/java/com/sky/utils/WeChatPayUtil.java
@@ -0,0 +1,235 @@
+package com.sky.utils;
+
+import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson.JSONObject;
+import com.sky.properties.WeChatProperties;
+import com.wechat.pay.contrib.apache.httpclient.WechatPayHttpClientBuilder;
+import com.wechat.pay.contrib.apache.httpclient.util.PemUtil;
+import org.apache.commons.lang.RandomStringUtils;
+import org.apache.http.HttpHeaders;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.entity.ContentType;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.util.EntityUtils;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.math.BigDecimal;
+import java.security.PrivateKey;
+import java.security.Signature;
+import java.security.cert.X509Certificate;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.List;
+
+/**
+ * 微信支付工具类
+ */
+@Component
+public class WeChatPayUtil {
+
+    //微信支付下单接口地址
+    public static final String JSAPI = "https://api.mch.weixin.qq.com/v3/pay/transactions/jsapi";
+
+    //申请退款接口地址
+    public static final String REFUNDS = "https://api.mch.weixin.qq.com/v3/refund/domestic/refunds";
+
+    @Autowired
+    private WeChatProperties weChatProperties;
+
+    /**
+     * 获取调用微信接口的客户端工具对象
+     *
+     * @return
+     */
+    private CloseableHttpClient getClient() {
+        PrivateKey merchantPrivateKey = null;
+        try {
+            //merchantPrivateKey商户API私钥，如何加载商户API私钥请看常见问题
+            merchantPrivateKey = PemUtil.loadPrivateKey(new FileInputStream(new File(weChatProperties.getPrivateKeyFilePath())));
+            //加载平台证书文件
+            X509Certificate x509Certificate = PemUtil.loadCertificate(new FileInputStream(new File(weChatProperties.getWeChatPayCertFilePath())));
+            //wechatPayCertificates微信支付平台证书列表。你也可以使用后面章节提到的“定时更新平台证书功能”，而不需要关心平台证书的来龙去脉
+            List<X509Certificate> wechatPayCertificates = Arrays.asList(x509Certificate);
+
+            WechatPayHttpClientBuilder builder = WechatPayHttpClientBuilder.create()
+                    .withMerchant(weChatProperties.getMchid(), weChatProperties.getMchSerialNo(), merchantPrivateKey)
+                    .withWechatPay(wechatPayCertificates);
+
+            // 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签
+            CloseableHttpClient httpClient = builder.build();
+            return httpClient;
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    /**
+     * 发送post方式请求
+     *
+     * @param url
+     * @param body
+     * @return
+     */
+    private String post(String url, String body) throws Exception {
+        CloseableHttpClient httpClient = getClient();
+
+        HttpPost httpPost = new HttpPost(url);
+        httpPost.addHeader(HttpHeaders.ACCEPT, ContentType.APPLICATION_JSON.toString());
+        httpPost.addHeader(HttpHeaders.CONTENT_TYPE, ContentType.APPLICATION_JSON.toString());
+        httpPost.addHeader("Wechatpay-Serial", weChatProperties.getMchSerialNo());
+        httpPost.setEntity(new StringEntity(body, "UTF-8"));
+
+        CloseableHttpResponse response = httpClient.execute(httpPost);
+        try {
+            String bodyAsString = EntityUtils.toString(response.getEntity());
+            return bodyAsString;
+        } finally {
+            httpClient.close();
+            response.close();
+        }
+    }
+
+    /**
+     * 发送get方式请求
+     *
+     * @param url
+     * @return
+     */
+    private String get(String url) throws Exception {
+        CloseableHttpClient httpClient = getClient();
+
+        HttpGet httpGet = new HttpGet(url);
+        httpGet.addHeader(HttpHeaders.ACCEPT, ContentType.APPLICATION_JSON.toString());
+        httpGet.addHeader(HttpHeaders.CONTENT_TYPE, ContentType.APPLICATION_JSON.toString());
+        httpGet.addHeader("Wechatpay-Serial", weChatProperties.getMchSerialNo());
+
+        CloseableHttpResponse response = httpClient.execute(httpGet);
+        try {
+            String bodyAsString = EntityUtils.toString(response.getEntity());
+            return bodyAsString;
+        } finally {
+            httpClient.close();
+            response.close();
+        }
+    }
+
+    /**
+     * jsapi下单
+     *
+     * @param orderNum    商户订单号
+     * @param total       总金额
+     * @param description 商品描述
+     * @param openid      微信用户的openid
+     * @return
+     */
+    private String jsapi(String orderNum, BigDecimal total, String description, String openid) throws Exception {
+        JSONObject jsonObject = new JSONObject();
+        jsonObject.put("appid", weChatProperties.getAppid());
+        jsonObject.put("mchid", weChatProperties.getMchid());
+        jsonObject.put("description", description);
+        jsonObject.put("out_trade_no", orderNum);
+        jsonObject.put("notify_url", weChatProperties.getNotifyUrl());
+
+        JSONObject amount = new JSONObject();
+        amount.put("total", total.multiply(new BigDecimal(100)).setScale(2, BigDecimal.ROUND_HALF_UP).intValue());
+        amount.put("currency", "CNY");
+
+        jsonObject.put("amount", amount);
+
+        JSONObject payer = new JSONObject();
+        payer.put("openid", openid);
+
+        jsonObject.put("payer", payer);
+
+        String body = jsonObject.toJSONString();
+        return post(JSAPI, body);
+    }
+
+    /**
+     * 小程序支付
+     *
+     * @param orderNum    商户订单号
+     * @param total       金额，单位 元
+     * @param description 商品描述
+     * @param openid      微信用户的openid
+     * @return
+     */
+    public JSONObject pay(String orderNum, BigDecimal total, String description, String openid) throws Exception {
+        //统一下单，生成预支付交易单
+        String bodyAsString = jsapi(orderNum, total, description, openid);
+        //解析返回结果
+        JSONObject jsonObject = JSON.parseObject(bodyAsString);
+        System.out.println(jsonObject);
+
+        String prepayId = jsonObject.getString("prepay_id");
+        if (prepayId != null) {
+            String timeStamp = String.valueOf(System.currentTimeMillis() / 1000);
+            String nonceStr = RandomStringUtils.randomNumeric(32);
+            ArrayList<Object> list = new ArrayList<>();
+            list.add(weChatProperties.getAppid());
+            list.add(timeStamp);
+            list.add(nonceStr);
+            list.add("prepay_id=" + prepayId);
+            //二次签名，调起支付需要重新签名
+            StringBuilder stringBuilder = new StringBuilder();
+            for (Object o : list) {
+                stringBuilder.append(o).append("\n");
+            }
+            String signMessage = stringBuilder.toString();
+            byte[] message = signMessage.getBytes();
+
+            Signature signature = Signature.getInstance("SHA256withRSA");
+            signature.initSign(PemUtil.loadPrivateKey(new FileInputStream(new File(weChatProperties.getPrivateKeyFilePath()))));
+            signature.update(message);
+            String packageSign = Base64.getEncoder().encodeToString(signature.sign());
+
+            //构造数据给微信小程序，用于调起微信支付
+            JSONObject jo = new JSONObject();
+            jo.put("timeStamp", timeStamp);
+            jo.put("nonceStr", nonceStr);
+            jo.put("package", "prepay_id=" + prepayId);
+            jo.put("signType", "RSA");
+            jo.put("paySign", packageSign);
+
+            return jo;
+        }
+        return jsonObject;
+    }
+
+    /**
+     * 申请退款
+     *
+     * @param outTradeNo    商户订单号
+     * @param outRefundNo   商户退款单号
+     * @param refund        退款金额
+     * @param total         原订单金额
+     * @return
+     */
+    public String refund(String outTradeNo, String outRefundNo, BigDecimal refund, BigDecimal total) throws Exception {
+        JSONObject jsonObject = new JSONObject();
+        jsonObject.put("out_trade_no", outTradeNo);
+        jsonObject.put("out_refund_no", outRefundNo);
+
+        JSONObject amount = new JSONObject();
+        amount.put("refund", refund.multiply(new BigDecimal(100)).setScale(2, BigDecimal.ROUND_HALF_UP).intValue());
+        amount.put("total", total.multiply(new BigDecimal(100)).setScale(2, BigDecimal.ROUND_HALF_UP).intValue());
+        amount.put("currency", "CNY");
+
+        jsonObject.put("amount", amount);
+        jsonObject.put("notify_url", weChatProperties.getRefundNotifyUrl());
+
+        String body = jsonObject.toJSONString();
+
+        //调用申请退款接口
+        return post(REFUNDS, body);
+    }
+}
diff --git a/sky-pojo/pom.xml b/sky-pojo/pom.xml
new file mode 100644
index 0000000..3f8fa51
--- /dev/null
+++ b/sky-pojo/pom.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>sky-take-out</artifactId>
+        <groupId>com.sky</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>sky-pojo</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-databind</artifactId>
+            <version>2.9.2</version>
+        </dependency>
+        <dependency>
+            <groupId>com.github.xiaoymin</groupId>
+            <artifactId>knife4j-spring-boot-starter</artifactId>
+        </dependency>
+    </dependencies>
+</project>
diff --git a/sky-pojo/src/main/java/com/sky/dto/CategoryDTO.java b/sky-pojo/src/main/java/com/sky/dto/CategoryDTO.java
new file mode 100644
index 0000000..ce3bfcf
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/CategoryDTO.java
@@ -0,0 +1,22 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+public class CategoryDTO implements Serializable {
+
+    //主键
+    private Long id;
+
+    //类型 1 菜品分类 2 套餐分类
+    private Integer type;
+
+    //分类名称
+    private String name;
+
+    //排序
+    private Integer sort;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/CategoryPageQueryDTO.java b/sky-pojo/src/main/java/com/sky/dto/CategoryPageQueryDTO.java
new file mode 100644
index 0000000..0e0cf95
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/CategoryPageQueryDTO.java
@@ -0,0 +1,22 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+public class CategoryPageQueryDTO implements Serializable {
+
+    //页码
+    private int page;
+
+    //每页记录数
+    private int pageSize;
+
+    //分类名称
+    private String name;
+
+    //分类类型 1菜品分类  2套餐分类
+    private Integer type;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/DataOverViewQueryDTO.java b/sky-pojo/src/main/java/com/sky/dto/DataOverViewQueryDTO.java
new file mode 100644
index 0000000..03a11b3
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/DataOverViewQueryDTO.java
@@ -0,0 +1,21 @@
+package com.sky.dto;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.time.LocalDateTime;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class DataOverViewQueryDTO implements Serializable {
+
+    private LocalDateTime begin;
+
+    private LocalDateTime end;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/DishDTO.java b/sky-pojo/src/main/java/com/sky/dto/DishDTO.java
new file mode 100644
index 0000000..33901cc
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/DishDTO.java
@@ -0,0 +1,29 @@
+package com.sky.dto;
+
+import com.sky.entity.DishFlavor;
+import lombok.Data;
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.List;
+
+@Data
+public class DishDTO implements Serializable {
+
+    private Long id;
+    //菜品名称
+    private String name;
+    //菜品分类id
+    private Long categoryId;
+    //菜品价格
+    private BigDecimal price;
+    //图片
+    private String image;
+    //描述信息
+    private String description;
+    //0 停售 1 起售
+    private Integer status;
+    //口味
+    private List<DishFlavor> flavors = new ArrayList<>();
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/DishPageQueryDTO.java b/sky-pojo/src/main/java/com/sky/dto/DishPageQueryDTO.java
new file mode 100644
index 0000000..bd57500
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/DishPageQueryDTO.java
@@ -0,0 +1,22 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+public class DishPageQueryDTO implements Serializable {
+
+    private int page;
+
+    private int pageSize;
+
+    private String name;
+
+    //分类id
+    private Integer categoryId;
+
+    //状态 0表示禁用 1表示启用
+    private Integer status;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/EmployeeDTO.java b/sky-pojo/src/main/java/com/sky/dto/EmployeeDTO.java
new file mode 100644
index 0000000..766e37d
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/EmployeeDTO.java
@@ -0,0 +1,22 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+public class EmployeeDTO implements Serializable {
+
+    private Long id;
+
+    private String username;
+
+    private String name;
+
+    private String phone;
+
+    private String sex;
+
+    private String idNumber;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/EmployeeLoginDTO.java b/sky-pojo/src/main/java/com/sky/dto/EmployeeLoginDTO.java
new file mode 100644
index 0000000..176470a
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/EmployeeLoginDTO.java
@@ -0,0 +1,19 @@
+package com.sky.dto;
+
+import io.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModelProperty;
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+@ApiModel(description = "员工登录时传递的数据模型")
+public class EmployeeLoginDTO implements Serializable {
+
+    @ApiModelProperty("用户名")
+    private String username;
+
+    @ApiModelProperty("密码")
+    private String password;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/EmployeePageQueryDTO.java b/sky-pojo/src/main/java/com/sky/dto/EmployeePageQueryDTO.java
new file mode 100644
index 0000000..8c3dcf6
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/EmployeePageQueryDTO.java
@@ -0,0 +1,19 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+public class EmployeePageQueryDTO implements Serializable {
+
+    //员工姓名
+    private String name;
+
+    //页码
+    private int page;
+
+    //每页显示记录数
+    private int pageSize;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/GoodsSalesDTO.java b/sky-pojo/src/main/java/com/sky/dto/GoodsSalesDTO.java
new file mode 100644
index 0000000..e52a21d
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/GoodsSalesDTO.java
@@ -0,0 +1,20 @@
+package com.sky.dto;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@Builder
+public class GoodsSalesDTO implements Serializable {
+    //商品名称
+    private String name;
+
+    //销量
+    private Integer number;
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/OrdersCancelDTO.java b/sky-pojo/src/main/java/com/sky/dto/OrdersCancelDTO.java
new file mode 100644
index 0000000..1e48a98
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/OrdersCancelDTO.java
@@ -0,0 +1,14 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+public class OrdersCancelDTO implements Serializable {
+
+    private Long id;
+    //订单取消原因
+    private String cancelReason;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/OrdersConfirmDTO.java b/sky-pojo/src/main/java/com/sky/dto/OrdersConfirmDTO.java
new file mode 100644
index 0000000..964543e
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/OrdersConfirmDTO.java
@@ -0,0 +1,14 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+public class OrdersConfirmDTO implements Serializable {
+
+    private Long id;
+    //订单状态 1待付款 2待接单 3 已接单 4 派送中 5 已完成 6 已取消 7 退款
+    private Integer status;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/OrdersDTO.java b/sky-pojo/src/main/java/com/sky/dto/OrdersDTO.java
new file mode 100644
index 0000000..f3bd20e
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/OrdersDTO.java
@@ -0,0 +1,56 @@
+package com.sky.dto;
+
+import com.sky.entity.OrderDetail;
+import lombok.Data;
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+import java.util.List;
+
+@Data
+public class OrdersDTO implements Serializable {
+
+    private Long id;
+
+    //订单号
+    private String number;
+
+    //订单状态 1待付款，2待派送，3已派送，4已完成，5已取消
+    private Integer status;
+
+    //下单用户id
+    private Long userId;
+
+    //地址id
+    private Long addressBookId;
+
+    //下单时间
+    private LocalDateTime orderTime;
+
+    //结账时间
+    private LocalDateTime checkoutTime;
+
+    //支付方式 1微信，2支付宝
+    private Integer payMethod;
+
+    //实收金额
+    private BigDecimal amount;
+
+    //备注
+    private String remark;
+
+    //用户名
+    private String userName;
+
+    //手机号
+    private String phone;
+
+    //地址
+    private String address;
+
+    //收货人
+    private String consignee;
+
+    private List<OrderDetail> orderDetails;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/OrdersPageQueryDTO.java b/sky-pojo/src/main/java/com/sky/dto/OrdersPageQueryDTO.java
new file mode 100644
index 0000000..eac827a
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/OrdersPageQueryDTO.java
@@ -0,0 +1,30 @@
+package com.sky.dto;
+
+import lombok.Data;
+import org.springframework.format.annotation.DateTimeFormat;
+
+import java.io.Serializable;
+import java.time.LocalDateTime;
+
+@Data
+public class OrdersPageQueryDTO implements Serializable {
+
+    private int page;
+
+    private int pageSize;
+
+    private String number;
+
+    private  String phone;
+
+    private Integer status;
+
+    @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
+    private LocalDateTime beginTime;
+
+    @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
+    private LocalDateTime endTime;
+
+    private Long userId;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/OrdersPaymentDTO.java b/sky-pojo/src/main/java/com/sky/dto/OrdersPaymentDTO.java
new file mode 100644
index 0000000..da02b63
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/OrdersPaymentDTO.java
@@ -0,0 +1,14 @@
+package com.sky.dto;
+
+import lombok.Data;
+import java.io.Serializable;
+
+@Data
+public class OrdersPaymentDTO implements Serializable {
+    //订单号
+    private String orderNumber;
+
+    //付款方式
+    private Integer payMethod;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/OrdersRejectionDTO.java b/sky-pojo/src/main/java/com/sky/dto/OrdersRejectionDTO.java
new file mode 100644
index 0000000..ce6d03c
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/OrdersRejectionDTO.java
@@ -0,0 +1,15 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+public class OrdersRejectionDTO implements Serializable {
+
+    private Long id;
+
+    //订单拒绝原因
+    private String rejectionReason;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/OrdersSubmitDTO.java b/sky-pojo/src/main/java/com/sky/dto/OrdersSubmitDTO.java
new file mode 100644
index 0000000..da73773
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/OrdersSubmitDTO.java
@@ -0,0 +1,31 @@
+package com.sky.dto;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import lombok.Data;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+
+@Data
+public class OrdersSubmitDTO implements Serializable {
+    //地址簿id
+    private Long addressBookId;
+    //付款方式
+    private int payMethod;
+    //备注
+    private String remark;
+    //预计送达时间
+    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")
+    private LocalDateTime estimatedDeliveryTime;
+    //配送状态  1立即送出  0选择具体时间
+    private Integer deliveryStatus;
+    //餐具数量
+    private Integer tablewareNumber;
+    //餐具数量状态  1按餐量提供  0选择具体数量
+    private Integer tablewareStatus;
+    //打包费
+    private Integer packAmount;
+    //总金额
+    private BigDecimal amount;
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/PasswordEditDTO.java b/sky-pojo/src/main/java/com/sky/dto/PasswordEditDTO.java
new file mode 100644
index 0000000..303d678
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/PasswordEditDTO.java
@@ -0,0 +1,19 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+public class PasswordEditDTO implements Serializable {
+
+    //员工id
+    private Long empId;
+
+    //旧密码
+    private String oldPassword;
+
+    //新密码
+    private String newPassword;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/SetmealDTO.java b/sky-pojo/src/main/java/com/sky/dto/SetmealDTO.java
new file mode 100644
index 0000000..3754aca
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/SetmealDTO.java
@@ -0,0 +1,36 @@
+package com.sky.dto;
+
+import com.sky.entity.SetmealDish;
+import lombok.Data;
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.List;
+
+@Data
+public class SetmealDTO implements Serializable {
+
+    private Long id;
+
+    //分类id
+    private Long categoryId;
+
+    //套餐名称
+    private String name;
+
+    //套餐价格
+    private BigDecimal price;
+
+    //状态 0:停用 1:启用
+    private Integer status;
+
+    //描述信息
+    private String description;
+
+    //图片
+    private String image;
+
+    //套餐菜品关系
+    private List<SetmealDish> setmealDishes = new ArrayList<>();
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/SetmealPageQueryDTO.java b/sky-pojo/src/main/java/com/sky/dto/SetmealPageQueryDTO.java
new file mode 100644
index 0000000..8d66fee
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/SetmealPageQueryDTO.java
@@ -0,0 +1,22 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+@Data
+public class SetmealPageQueryDTO implements Serializable {
+
+    private int page;
+
+    private int pageSize;
+
+    private String name;
+
+    //分类id
+    private Integer categoryId;
+
+    //状态 0表示禁用 1表示启用
+    private Integer status;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/ShoppingCartDTO.java b/sky-pojo/src/main/java/com/sky/dto/ShoppingCartDTO.java
new file mode 100644
index 0000000..51286a2
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/ShoppingCartDTO.java
@@ -0,0 +1,13 @@
+package com.sky.dto;
+
+import lombok.Data;
+import java.io.Serializable;
+
+@Data
+public class ShoppingCartDTO implements Serializable {
+
+    private Long dishId;
+    private Long setmealId;
+    private String dishFlavor;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/dto/UserLoginDTO.java b/sky-pojo/src/main/java/com/sky/dto/UserLoginDTO.java
new file mode 100644
index 0000000..e1f6959
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/dto/UserLoginDTO.java
@@ -0,0 +1,15 @@
+package com.sky.dto;
+
+import lombok.Data;
+
+import java.io.Serializable;
+
+/**
+ * C端用户登录
+ */
+@Data
+public class UserLoginDTO implements Serializable {
+
+    private String code;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/AddressBook.java b/sky-pojo/src/main/java/com/sky/entity/AddressBook.java
new file mode 100644
index 0000000..845903c
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/AddressBook.java
@@ -0,0 +1,61 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+/**
+ * 地址簿
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class AddressBook implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+
+    //用户id
+    private Long userId;
+
+    //收货人
+    private String consignee;
+
+    //手机号
+    private String phone;
+
+    //性别 0 女 1 男
+    private String sex;
+
+    //省级区划编号
+    private String provinceCode;
+
+    //省级名称
+    private String provinceName;
+
+    //市级区划编号
+    private String cityCode;
+
+    //市级名称
+    private String cityName;
+
+    //区级区划编号
+    private String districtCode;
+
+    //区级名称
+    private String districtName;
+
+    //详细地址
+    private String detail;
+
+    //标签
+    private String label;
+
+    //是否默认 0否 1是
+    private Integer isDefault;
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/Category.java b/sky-pojo/src/main/java/com/sky/entity/Category.java
new file mode 100644
index 0000000..3ddb205
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/Category.java
@@ -0,0 +1,43 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import java.io.Serializable;
+import java.time.LocalDateTime;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class Category implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+
+    //类型: 1菜品分类 2套餐分类
+    private Integer type;
+
+    //分类名称
+    private String name;
+
+    //顺序
+    private Integer sort;
+
+    //分类状态 0标识禁用 1表示启用
+    private Integer status;
+
+    //创建时间
+    private LocalDateTime createTime;
+
+    //更新时间
+    private LocalDateTime updateTime;
+
+    //创建人
+    private Long createUser;
+
+    //修改人
+    private Long updateUser;
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/Dish.java b/sky-pojo/src/main/java/com/sky/entity/Dish.java
new file mode 100644
index 0000000..f62329d
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/Dish.java
@@ -0,0 +1,50 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+
+/**
+ * 菜品
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class Dish implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+
+    //菜品名称
+    private String name;
+
+    //菜品分类id
+    private Long categoryId;
+
+    //菜品价格
+    private BigDecimal price;
+
+    //图片
+    private String image;
+
+    //描述信息
+    private String description;
+
+    //0 停售 1 起售
+    private Integer status;
+
+    private LocalDateTime createTime;
+
+    private LocalDateTime updateTime;
+
+    private Long createUser;
+
+    private Long updateUser;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/DishFlavor.java b/sky-pojo/src/main/java/com/sky/entity/DishFlavor.java
new file mode 100644
index 0000000..c6d448e
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/DishFlavor.java
@@ -0,0 +1,31 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+/**
+ * 菜品口味
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class DishFlavor implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+    //菜品id
+    private Long dishId;
+
+    //口味名称
+    private String name;
+
+    //口味数据list
+    private String value;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/Employee.java b/sky-pojo/src/main/java/com/sky/entity/Employee.java
new file mode 100644
index 0000000..0076cc2
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/Employee.java
@@ -0,0 +1,45 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.time.LocalDateTime;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class Employee implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+
+    private String username;
+
+    private String name;
+
+    private String password;
+
+    private String phone;
+
+    private String sex;
+
+    private String idNumber;
+
+    private Integer status;
+
+    //@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
+    private LocalDateTime createTime;
+
+    //@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
+    private LocalDateTime updateTime;
+
+    private Long createUser;
+
+    private Long updateUser;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/OrderDetail.java b/sky-pojo/src/main/java/com/sky/entity/OrderDetail.java
new file mode 100644
index 0000000..18334dc
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/OrderDetail.java
@@ -0,0 +1,47 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+
+/**
+ * 订单明细
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class OrderDetail implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+
+    //名称
+    private String name;
+
+    //订单id
+    private Long orderId;
+
+    //菜品id
+    private Long dishId;
+
+    //套餐id
+    private Long setmealId;
+
+    //口味
+    private String dishFlavor;
+
+    //数量
+    private Integer number;
+
+    //金额
+    private BigDecimal amount;
+
+    //图片
+    private String image;
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/Orders.java b/sky-pojo/src/main/java/com/sky/entity/Orders.java
new file mode 100644
index 0000000..22b7805
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/Orders.java
@@ -0,0 +1,110 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+
+/**
+ * 订单
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class Orders implements Serializable {
+
+    /**
+     * 订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 6已取消
+     */
+    public static final Integer PENDING_PAYMENT = 1;
+    public static final Integer TO_BE_CONFIRMED = 2;
+    public static final Integer CONFIRMED = 3;
+    public static final Integer DELIVERY_IN_PROGRESS = 4;
+    public static final Integer COMPLETED = 5;
+    public static final Integer CANCELLED = 6;
+
+    /**
+     * 支付状态 0未支付 1已支付 2退款
+     */
+    public static final Integer UN_PAID = 0;
+    public static final Integer PAID = 1;
+    public static final Integer REFUND = 2;
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+
+    //订单号
+    private String number;
+
+    //订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 6已取消 7退款
+    private Integer status;
+
+    //下单用户id
+    private Long userId;
+
+    //地址id
+    private Long addressBookId;
+
+    //下单时间
+    private LocalDateTime orderTime;
+
+    //结账时间
+    private LocalDateTime checkoutTime;
+
+    //支付方式 1微信，2支付宝
+    private Integer payMethod;
+
+    //支付状态 0未支付 1已支付 2退款
+    private Integer payStatus;
+
+    //实收金额
+    private BigDecimal amount;
+
+    //备注
+    private String remark;
+
+    //用户名
+    private String userName;
+
+    //手机号
+    private String phone;
+
+    //地址
+    private String address;
+
+    //收货人
+    private String consignee;
+
+    //订单取消原因
+    private String cancelReason;
+
+    //订单拒绝原因
+    private String rejectionReason;
+
+    //订单取消时间
+    private LocalDateTime cancelTime;
+
+    //预计送达时间
+    private LocalDateTime estimatedDeliveryTime;
+
+    //配送状态  1立即送出  0选择具体时间
+    private Integer deliveryStatus;
+
+    //送达时间
+    private LocalDateTime deliveryTime;
+
+    //打包费
+    private int packAmount;
+
+    //餐具数量
+    private int tablewareNumber;
+
+    //餐具数量状态  1按餐量提供  0选择具体数量
+    private Integer tablewareStatus;
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/Setmeal.java b/sky-pojo/src/main/java/com/sky/entity/Setmeal.java
new file mode 100644
index 0000000..7049eed
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/Setmeal.java
@@ -0,0 +1,49 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+
+/**
+ * 套餐
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class Setmeal implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+
+    //分类id
+    private Long categoryId;
+
+    //套餐名称
+    private String name;
+
+    //套餐价格
+    private BigDecimal price;
+
+    //状态 0:停用 1:启用
+    private Integer status;
+
+    //描述信息
+    private String description;
+
+    //图片
+    private String image;
+
+    private LocalDateTime createTime;
+
+    private LocalDateTime updateTime;
+
+    private Long createUser;
+
+    private Long updateUser;
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/SetmealDish.java b/sky-pojo/src/main/java/com/sky/entity/SetmealDish.java
new file mode 100644
index 0000000..b3baaee
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/SetmealDish.java
@@ -0,0 +1,38 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+
+/**
+ * 套餐菜品关系
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SetmealDish implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+
+    //套餐id
+    private Long setmealId;
+
+    //菜品id
+    private Long dishId;
+
+    //菜品名称 （冗余字段）
+    private String name;
+
+    //菜品原价
+    private BigDecimal price;
+
+    //份数
+    private Integer copies;
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/ShoppingCart.java b/sky-pojo/src/main/java/com/sky/entity/ShoppingCart.java
new file mode 100644
index 0000000..a2c6d57
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/ShoppingCart.java
@@ -0,0 +1,50 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+
+/**
+ * 购物车
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class ShoppingCart implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+
+    //名称
+    private String name;
+
+    //用户id
+    private Long userId;
+
+    //菜品id
+    private Long dishId;
+
+    //套餐id
+    private Long setmealId;
+
+    //口味
+    private String dishFlavor;
+
+    //数量
+    private Integer number;
+
+    //金额
+    private BigDecimal amount;
+
+    //图片
+    private String image;
+
+    private LocalDateTime createTime;
+}
diff --git a/sky-pojo/src/main/java/com/sky/entity/User.java b/sky-pojo/src/main/java/com/sky/entity/User.java
new file mode 100644
index 0000000..6d39c46
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/entity/User.java
@@ -0,0 +1,42 @@
+package com.sky.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class User implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    private Long id;
+
+    //微信用户唯一标识
+    private String openid;
+
+    //姓名
+    private String name;
+
+    //手机号
+    private String phone;
+
+    //性别 0 女 1 男
+    private String sex;
+
+    //身份证号
+    private String idNumber;
+
+    //头像
+    private String avatar;
+
+    //注册时间
+    private LocalDateTime createTime;
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/BusinessDataVO.java b/sky-pojo/src/main/java/com/sky/vo/BusinessDataVO.java
new file mode 100644
index 0000000..50e8bc6
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/BusinessDataVO.java
@@ -0,0 +1,29 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+/**
+ * 数据概览
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class BusinessDataVO implements Serializable {
+
+    private Double turnover;//营业额
+
+    private Integer validOrderCount;//有效订单数
+
+    private Double orderCompletionRate;//订单完成率
+
+    private Double unitPrice;//平均客单价
+
+    private Integer newUsers;//新增用户数
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/DishItemVO.java b/sky-pojo/src/main/java/com/sky/vo/DishItemVO.java
new file mode 100644
index 0000000..0b36866
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/DishItemVO.java
@@ -0,0 +1,27 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class DishItemVO implements Serializable {
+
+    //菜品名称
+    private String name;
+
+    //份数
+    private Integer copies;
+
+    //菜品图片
+    private String image;
+
+    //菜品描述
+    private String description;
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/DishOverViewVO.java b/sky-pojo/src/main/java/com/sky/vo/DishOverViewVO.java
new file mode 100644
index 0000000..6e55d64
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/DishOverViewVO.java
@@ -0,0 +1,23 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+/**
+ * 菜品总览
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class DishOverViewVO implements Serializable {
+    // 已启售数量
+    private Integer sold;
+
+    // 已停售数量
+    private Integer discontinued;
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/DishVO.java b/sky-pojo/src/main/java/com/sky/vo/DishVO.java
new file mode 100644
index 0000000..9923d3a
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/DishVO.java
@@ -0,0 +1,41 @@
+package com.sky.vo;
+
+import com.sky.entity.DishFlavor;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.List;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class DishVO implements Serializable {
+
+    private Long id;
+    //菜品名称
+    private String name;
+    //菜品分类id
+    private Long categoryId;
+    //菜品价格
+    private BigDecimal price;
+    //图片
+    private String image;
+    //描述信息
+    private String description;
+    //0 停售 1 起售
+    private Integer status;
+    //更新时间
+    private LocalDateTime updateTime;
+    //分类名称
+    private String categoryName;
+    //菜品关联的口味
+    private List<DishFlavor> flavors = new ArrayList<>();
+
+    //private Integer copies;
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/EmployeeLoginVO.java b/sky-pojo/src/main/java/com/sky/vo/EmployeeLoginVO.java
new file mode 100644
index 0000000..55624b9
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/EmployeeLoginVO.java
@@ -0,0 +1,31 @@
+package com.sky.vo;
+
+import io.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModelProperty;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+@ApiModel(description = "员工登录返回的数据格式")
+public class EmployeeLoginVO implements Serializable {
+
+    @ApiModelProperty("主键值")
+    private Long id;
+
+    @ApiModelProperty("用户名")
+    private String userName;
+
+    @ApiModelProperty("姓名")
+    private String name;
+
+    @ApiModelProperty("jwt令牌")
+    private String token;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/OrderOverViewVO.java b/sky-pojo/src/main/java/com/sky/vo/OrderOverViewVO.java
new file mode 100644
index 0000000..0dfd103
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/OrderOverViewVO.java
@@ -0,0 +1,32 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+/**
+ * 订单概览数据
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class OrderOverViewVO implements Serializable {
+    //待接单数量
+    private Integer waitingOrders;
+
+    //待派送数量
+    private Integer deliveredOrders;
+
+    //已完成数量
+    private Integer completedOrders;
+
+    //已取消数量
+    private Integer cancelledOrders;
+
+    //全部订单
+    private Integer allOrders;
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/OrderPaymentVO.java b/sky-pojo/src/main/java/com/sky/vo/OrderPaymentVO.java
new file mode 100644
index 0000000..169e6b1
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/OrderPaymentVO.java
@@ -0,0 +1,23 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.time.LocalDateTime;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class OrderPaymentVO implements Serializable {
+
+    private String nonceStr; //随机字符串
+    private String paySign; //签名
+    private String timeStamp; //时间戳
+    private String signType; //签名算法
+    private String packageStr; //统一下单接口返回的 prepay_id 参数值
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/OrderReportVO.java b/sky-pojo/src/main/java/com/sky/vo/OrderReportVO.java
new file mode 100644
index 0000000..fe0a574
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/OrderReportVO.java
@@ -0,0 +1,34 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class OrderReportVO implements Serializable {
+
+    //日期，以逗号分隔，例如：2022-10-01,2022-10-02,2022-10-03
+    private String dateList;
+
+    //每日订单数，以逗号分隔，例如：260,210,215
+    private String orderCountList;
+
+    //每日有效订单数，以逗号分隔，例如：20,21,10
+    private String validOrderCountList;
+
+    //订单总数
+    private Integer totalOrderCount;
+
+    //有效订单数
+    private Integer validOrderCount;
+
+    //订单完成率
+    private Double orderCompletionRate;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/OrderStatisticsVO.java b/sky-pojo/src/main/java/com/sky/vo/OrderStatisticsVO.java
new file mode 100644
index 0000000..bb005ff
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/OrderStatisticsVO.java
@@ -0,0 +1,16 @@
+package com.sky.vo;
+
+import lombok.Data;
+import java.io.Serializable;
+
+@Data
+public class OrderStatisticsVO implements Serializable {
+    //待接单数量
+    private Integer toBeConfirmed;
+
+    //待派送数量
+    private Integer confirmed;
+
+    //派送中数量
+    private Integer deliveryInProgress;
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/OrderSubmitVO.java b/sky-pojo/src/main/java/com/sky/vo/OrderSubmitVO.java
new file mode 100644
index 0000000..8334fcd
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/OrderSubmitVO.java
@@ -0,0 +1,25 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class OrderSubmitVO implements Serializable {
+    //订单id
+    private Long id;
+    //订单号
+    private String orderNumber;
+    //订单金额
+    private BigDecimal orderAmount;
+    //下单时间
+    private LocalDateTime orderTime;
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/OrderVO.java b/sky-pojo/src/main/java/com/sky/vo/OrderVO.java
new file mode 100644
index 0000000..59715de
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/OrderVO.java
@@ -0,0 +1,22 @@
+package com.sky.vo;
+
+import com.sky.entity.OrderDetail;
+import com.sky.entity.Orders;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import java.io.Serializable;
+import java.util.List;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class OrderVO extends Orders implements Serializable {
+
+    //订单菜品信息
+    private String orderDishes;
+
+    //订单详情
+    private List<OrderDetail> orderDetailList;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/SalesTop10ReportVO.java b/sky-pojo/src/main/java/com/sky/vo/SalesTop10ReportVO.java
new file mode 100644
index 0000000..bdbaa3c
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/SalesTop10ReportVO.java
@@ -0,0 +1,22 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SalesTop10ReportVO implements Serializable {
+
+    //商品名称列表，以逗号分隔，例如：鱼香肉丝,宫保鸡丁,水煮鱼
+    private String nameList;
+
+    //销量列表，以逗号分隔，例如：260,215,200
+    private String numberList;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/SetmealOverViewVO.java b/sky-pojo/src/main/java/com/sky/vo/SetmealOverViewVO.java
new file mode 100644
index 0000000..7d46db5
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/SetmealOverViewVO.java
@@ -0,0 +1,23 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+/**
+ * 套餐总览
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SetmealOverViewVO implements Serializable {
+    // 已启售数量
+    private Integer sold;
+
+    // 已停售数量
+    private Integer discontinued;
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/SetmealVO.java b/sky-pojo/src/main/java/com/sky/vo/SetmealVO.java
new file mode 100644
index 0000000..3b32b78
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/SetmealVO.java
@@ -0,0 +1,48 @@
+package com.sky.vo;
+
+import com.sky.entity.SetmealDish;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.List;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SetmealVO implements Serializable {
+
+    private Long id;
+
+    //分类id
+    private Long categoryId;
+
+    //套餐名称
+    private String name;
+
+    //套餐价格
+    private BigDecimal price;
+
+    //状态 0:停用 1:启用
+    private Integer status;
+
+    //描述信息
+    private String description;
+
+    //图片
+    private String image;
+
+    //更新时间
+    private LocalDateTime updateTime;
+
+    //分类名称
+    private String categoryName;
+
+    //套餐和菜品的关联关系
+    private List<SetmealDish> setmealDishes = new ArrayList<>();
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/TurnoverReportVO.java b/sky-pojo/src/main/java/com/sky/vo/TurnoverReportVO.java
new file mode 100644
index 0000000..c345bff
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/TurnoverReportVO.java
@@ -0,0 +1,22 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class TurnoverReportVO implements Serializable {
+
+    //日期，以逗号分隔，例如：2022-10-01,2022-10-02,2022-10-03
+    private String dateList;
+
+    //营业额，以逗号分隔，例如：406.0,1520.0,75.0
+    private String turnoverList;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/UserLoginVO.java b/sky-pojo/src/main/java/com/sky/vo/UserLoginVO.java
new file mode 100644
index 0000000..3ad83a8
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/UserLoginVO.java
@@ -0,0 +1,20 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class UserLoginVO implements Serializable {
+
+    private Long id;
+    private String openid;
+    private String token;
+
+}
diff --git a/sky-pojo/src/main/java/com/sky/vo/UserReportVO.java b/sky-pojo/src/main/java/com/sky/vo/UserReportVO.java
new file mode 100644
index 0000000..4c017f4
--- /dev/null
+++ b/sky-pojo/src/main/java/com/sky/vo/UserReportVO.java
@@ -0,0 +1,25 @@
+package com.sky.vo;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class UserReportVO implements Serializable {
+
+    //日期，以逗号分隔，例如：2022-10-01,2022-10-02,2022-10-03
+    private String dateList;
+
+    //用户总量，以逗号分隔，例如：200,210,220
+    private String totalUserList;
+
+    //新增用户，以逗号分隔，例如：20,21,10
+    private String newUserList;
+
+}
diff --git a/sky-server/pom.xml b/sky-server/pom.xml
new file mode 100644
index 0000000..6172153
--- /dev/null
+++ b/sky-server/pom.xml
@@ -0,0 +1,129 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>sky-take-out</artifactId>
+        <groupId>com.sky</groupId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+    <artifactId>sky-server</artifactId>
+    <dependencies>
+
+        <dependency>
+            <groupId>com.sky</groupId>
+            <artifactId>sky-common</artifactId>
+            <version>1.0-SNAPSHOT</version>
+        </dependency>
+
+        <dependency>
+            <groupId>com.sky</groupId>
+            <artifactId>sky-pojo</artifactId>
+            <version>1.0-SNAPSHOT</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
+            <scope>compile</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+            <scope>runtime</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>org.mybatis.spring.boot</groupId>
+            <artifactId>mybatis-spring-boot-starter</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>com.alibaba</groupId>
+            <artifactId>fastjson</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>com.alibaba</groupId>
+            <artifactId>druid-spring-boot-starter</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>com.github.pagehelper</groupId>
+            <artifactId>pagehelper-spring-boot-starter</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.aspectj</groupId>
+            <artifactId>aspectjrt</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.aspectj</groupId>
+            <artifactId>aspectjweaver</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>com.github.xiaoymin</groupId>
+            <artifactId>knife4j-spring-boot-starter</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-data-redis</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-cache</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-websocket</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.xml.bind</groupId>
+            <artifactId>jaxb-api</artifactId>
+        </dependency>
+
+        <!-- poi -->
+        <dependency>
+            <groupId>org.apache.poi</groupId>
+            <artifactId>poi</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.poi</groupId>
+            <artifactId>poi-ooxml</artifactId>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+            </plugin>
+        </plugins>
+    </build>
+
+</project>
diff --git a/sky-server/src/main/java/com/sky/SkyApplication.java b/sky-server/src/main/java/com/sky/SkyApplication.java
new file mode 100644
index 0000000..b13f77c
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/SkyApplication.java
@@ -0,0 +1,16 @@
+package com.sky;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.transaction.annotation.EnableTransactionManagement;
+
+@SpringBootApplication
+@EnableTransactionManagement //开启注解方式的事务管理
+@Slf4j
+public class SkyApplication {
+    public static void main(String[] args) {
+        SpringApplication.run(SkyApplication.class, args);
+        log.info("server started");
+    }
+}
diff --git a/sky-server/src/main/java/com/sky/config/WebMvcConfiguration.java b/sky-server/src/main/java/com/sky/config/WebMvcConfiguration.java
new file mode 100644
index 0000000..98fc764
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/config/WebMvcConfiguration.java
@@ -0,0 +1,68 @@
+package com.sky.config;
+
+import com.sky.interceptor.JwtTokenAdminInterceptor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
+import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;
+import springfox.documentation.builders.ApiInfoBuilder;
+import springfox.documentation.builders.PathSelectors;
+import springfox.documentation.builders.RequestHandlerSelectors;
+import springfox.documentation.service.ApiInfo;
+import springfox.documentation.spi.DocumentationType;
+import springfox.documentation.spring.web.plugins.Docket;
+
+/**
+ * 配置类，注册web层相关组件
+ */
+@Configuration
+@Slf4j
+public class WebMvcConfiguration extends WebMvcConfigurationSupport {
+
+    @Autowired
+    private JwtTokenAdminInterceptor jwtTokenAdminInterceptor;
+
+    /**
+     * 注册自定义拦截器
+     *
+     * @param registry
+     */
+    protected void addInterceptors(InterceptorRegistry registry) {
+        log.info("开始注册自定义拦截器...");
+        registry.addInterceptor(jwtTokenAdminInterceptor)
+                .addPathPatterns("/admin/**")
+                .excludePathPatterns("/admin/employee/login");
+    }
+
+    /**
+     * 通过knife4j生成接口文档
+     * @return
+     */
+    @Bean
+    public Docket docket() {
+        ApiInfo apiInfo = new ApiInfoBuilder()
+                .title("苍穹外卖项目接口文档")
+                .version("2.0")
+                .description("苍穹外卖项目接口文档")
+                .build();
+        Docket docket = new Docket(DocumentationType.SWAGGER_2)
+                .apiInfo(apiInfo)
+                .select()
+                .apis(RequestHandlerSelectors.basePackage("com.sky.controller"))
+                .paths(PathSelectors.any())
+                .build();
+        return docket;
+    }
+
+    /**
+     * 设置静态资源映射
+     * @param registry
+     */
+    protected void addResourceHandlers(ResourceHandlerRegistry registry) {
+        registry.addResourceHandler("/doc.html").addResourceLocations("classpath:/META-INF/resources/");
+        registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/");
+    }
+}
diff --git a/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
new file mode 100644
index 0000000..5857f07
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/controller/admin/EmployeeController.java
@@ -0,0 +1,74 @@
+package com.sky.controller.admin;
+
+import com.sky.constant.JwtClaimsConstant;
+import com.sky.dto.EmployeeLoginDTO;
+import com.sky.entity.Employee;
+import com.sky.properties.JwtProperties;
+import com.sky.result.Result;
+import com.sky.service.EmployeeService;
+import com.sky.utils.JwtUtil;
+import com.sky.vo.EmployeeLoginVO;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * 员工管理
+ */
+@RestController
+@RequestMapping("/admin/employee")
+@Slf4j
+public class EmployeeController {
+
+    @Autowired
+    private EmployeeService employeeService;
+    @Autowired
+    private JwtProperties jwtProperties;
+
+    /**
+     * 登录
+     *
+     * @param employeeLoginDTO
+     * @return
+     */
+    @PostMapping("/login")
+    public Result<EmployeeLoginVO> login(@RequestBody EmployeeLoginDTO employeeLoginDTO) {
+        log.info("员工登录：{}", employeeLoginDTO);
+
+        Employee employee = employeeService.login(employeeLoginDTO);
+
+        //登录成功后，生成jwt令牌
+        Map<String, Object> claims = new HashMap<>();
+        claims.put(JwtClaimsConstant.EMP_ID, employee.getId());
+        String token = JwtUtil.createJWT(
+                jwtProperties.getAdminSecretKey(),
+                jwtProperties.getAdminTtl(),
+                claims);
+
+        EmployeeLoginVO employeeLoginVO = EmployeeLoginVO.builder()
+                .id(employee.getId())
+                .userName(employee.getUsername())
+                .name(employee.getName())
+                .token(token)
+                .build();
+
+        return Result.success(employeeLoginVO);
+    }
+
+    /**
+     * 退出
+     *
+     * @return
+     */
+    @PostMapping("/logout")
+    public Result<String> logout() {
+        return Result.success();
+    }
+
+}
diff --git a/sky-server/src/main/java/com/sky/handler/GlobalExceptionHandler.java b/sky-server/src/main/java/com/sky/handler/GlobalExceptionHandler.java
new file mode 100644
index 0000000..1a48598
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/handler/GlobalExceptionHandler.java
@@ -0,0 +1,27 @@
+package com.sky.handler;
+
+import com.sky.exception.BaseException;
+import com.sky.result.Result;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.RestControllerAdvice;
+
+/**
+ * 全局异常处理器，处理项目中抛出的业务异常
+ */
+@RestControllerAdvice
+@Slf4j
+public class GlobalExceptionHandler {
+
+    /**
+     * 捕获业务异常
+     * @param ex
+     * @return
+     */
+    @ExceptionHandler
+    public Result exceptionHandler(BaseException ex){
+        log.error("异常信息：{}", ex.getMessage());
+        return Result.error(ex.getMessage());
+    }
+
+}
diff --git a/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java b/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java
new file mode 100644
index 0000000..e7c50b6
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/interceptor/JwtTokenAdminInterceptor.java
@@ -0,0 +1,58 @@
+package com.sky.interceptor;
+
+import com.sky.constant.JwtClaimsConstant;
+import com.sky.properties.JwtProperties;
+import com.sky.utils.JwtUtil;
+import io.jsonwebtoken.Claims;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+import org.springframework.web.method.HandlerMethod;
+import org.springframework.web.servlet.HandlerInterceptor;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ * jwt令牌校验的拦截器
+ */
+@Component
+@Slf4j
+public class JwtTokenAdminInterceptor implements HandlerInterceptor {
+
+    @Autowired
+    private JwtProperties jwtProperties;
+
+    /**
+     * 校验jwt
+     *
+     * @param request
+     * @param response
+     * @param handler
+     * @return
+     * @throws Exception
+     */
+    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
+        //判断当前拦截到的是Controller的方法还是其他资源
+        if (!(handler instanceof HandlerMethod)) {
+            //当前拦截到的不是动态方法，直接放行
+            return true;
+        }
+
+        //1、从请求头中获取令牌
+        String token = request.getHeader(jwtProperties.getAdminTokenName());
+
+        //2、校验令牌
+        try {
+            log.info("jwt校验:{}", token);
+            Claims claims = JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);
+            Long empId = Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());
+            log.info("当前员工id：", empId);
+            //3、通过，放行
+            return true;
+        } catch (Exception ex) {
+            //4、不通过，响应401状态码
+            response.setStatus(401);
+            return false;
+        }
+    }
+}
diff --git a/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
new file mode 100644
index 0000000..550eda5
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/mapper/EmployeeMapper.java
@@ -0,0 +1,18 @@
+package com.sky.mapper;
+
+import com.sky.entity.Employee;
+import org.apache.ibatis.annotations.Mapper;
+import org.apache.ibatis.annotations.Select;
+
+@Mapper
+public interface EmployeeMapper {
+
+    /**
+     * 根据用户名查询员工
+     * @param username
+     * @return
+     */
+    @Select("select * from employee where username = #{username}")
+    Employee getByUsername(String username);
+
+}
diff --git a/sky-server/src/main/java/com/sky/service/EmployeeService.java b/sky-server/src/main/java/com/sky/service/EmployeeService.java
new file mode 100644
index 0000000..d3e2ab2
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/service/EmployeeService.java
@@ -0,0 +1,15 @@
+package com.sky.service;
+
+import com.sky.dto.EmployeeLoginDTO;
+import com.sky.entity.Employee;
+
+public interface EmployeeService {
+
+    /**
+     * 员工登录
+     * @param employeeLoginDTO
+     * @return
+     */
+    Employee login(EmployeeLoginDTO employeeLoginDTO);
+
+}
diff --git a/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
new file mode 100644
index 0000000..cc98c98
--- /dev/null
+++ b/sky-server/src/main/java/com/sky/service/impl/EmployeeServiceImpl.java
@@ -0,0 +1,57 @@
+package com.sky.service.impl;
+
+import com.sky.constant.MessageConstant;
+import com.sky.constant.StatusConstant;
+import com.sky.dto.EmployeeLoginDTO;
+import com.sky.entity.Employee;
+import com.sky.exception.AccountLockedException;
+import com.sky.exception.AccountNotFoundException;
+import com.sky.exception.PasswordErrorException;
+import com.sky.mapper.EmployeeMapper;
+import com.sky.service.EmployeeService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.util.DigestUtils;
+
+@Service
+public class EmployeeServiceImpl implements EmployeeService {
+
+    @Autowired
+    private EmployeeMapper employeeMapper;
+
+    /**
+     * 员工登录
+     *
+     * @param employeeLoginDTO
+     * @return
+     */
+    public Employee login(EmployeeLoginDTO employeeLoginDTO) {
+        String username = employeeLoginDTO.getUsername();
+        String password = employeeLoginDTO.getPassword();
+
+        //1、根据用户名查询数据库中的数据
+        Employee employee = employeeMapper.getByUsername(username);
+
+        //2、处理各种异常情况（用户名不存在、密码不对、账号被锁定）
+        if (employee == null) {
+            //账号不存在
+            throw new AccountNotFoundException(MessageConstant.ACCOUNT_NOT_FOUND);
+        }
+
+        //密码比对
+        // TODO 后期需要进行md5加密，然后再进行比对
+        if (!password.equals(employee.getPassword())) {
+            //密码错误
+            throw new PasswordErrorException(MessageConstant.PASSWORD_ERROR);
+        }
+
+        if (employee.getStatus() == StatusConstant.DISABLE) {
+            //账号被锁定
+            throw new AccountLockedException(MessageConstant.ACCOUNT_LOCKED);
+        }
+
+        //3、返回实体对象
+        return employee;
+    }
+
+}
diff --git a/sky-server/src/main/resources/application-dev.yml b/sky-server/src/main/resources/application-dev.yml
new file mode 100644
index 0000000..0339477
--- /dev/null
+++ b/sky-server/src/main/resources/application-dev.yml
@@ -0,0 +1,8 @@
+sky:
+  datasource:
+    driver-class-name: com.mysql.cj.jdbc.Driver
+    host: localhost
+    port: 3306
+    database: sky_take_out
+    username: root
+    password: root
diff --git a/sky-server/src/main/resources/application.yml b/sky-server/src/main/resources/application.yml
new file mode 100644
index 0000000..24df577
--- /dev/null
+++ b/sky-server/src/main/resources/application.yml
@@ -0,0 +1,39 @@
+server:
+  port: 8080
+
+spring:
+  profiles:
+    active: dev
+  main:
+    allow-circular-references: true
+  datasource:
+    druid:
+      driver-class-name: ${sky.datasource.driver-class-name}
+      url: jdbc:mysql://${sky.datasource.host}:${sky.datasource.port}/${sky.datasource.database}?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
+      username: ${sky.datasource.username}
+      password: ${sky.datasource.password}
+
+mybatis:
+  #mapper配置文件
+  mapper-locations: classpath:mapper/*.xml
+  type-aliases-package: com.sky.entity
+  configuration:
+    #开启驼峰命名
+    map-underscore-to-camel-case: true
+
+logging:
+  level:
+    com:
+      sky:
+        mapper: debug
+        service: info
+        controller: info
+
+sky:
+  jwt:
+    # 设置jwt签名加密时使用的秘钥
+    admin-secret-key: itcast
+    # 设置jwt过期时间
+    admin-ttl: 7200000
+    # 设置前端传递过来的令牌名称
+    admin-token-name: token
diff --git a/sky-server/src/main/resources/mapper/EmployeeMapper.xml b/sky-server/src/main/resources/mapper/EmployeeMapper.xml
new file mode 100644
index 0000000..3c3dc8d
--- /dev/null
+++ b/sky-server/src/main/resources/mapper/EmployeeMapper.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
+<mapper namespace="com.sky.mapper.EmployeeMapper">
+</mapper>
